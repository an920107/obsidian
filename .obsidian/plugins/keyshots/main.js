/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/plugin.ts
var plugin_exports = {};
__export(plugin_exports, {
  default: () => KeyshotsPlugin
});
module.exports = __toCommonJS(plugin_exports);
var import_obsidian11 = require("obsidian");

// src/mappings/hotkeys.ts
var HotKey = (key, ...modifiers) => [{ key, modifiers }];
var DEFAULT_MAP = {
  add_caret_down: HotKey("ArrowDown", "Mod", "Alt"),
  add_caret_up: HotKey("ArrowUp", "Mod", "Alt"),
  better_insert_callout: HotKey("C", "Shift", "Alt"),
  change_keyshots_preset: HotKey("P", "Mod", "Shift"),
  close_all_foldable_callouts: HotKey("L", "Shift", "Alt"),
  duplicate_line_down: HotKey("ArrowDown", "Shift", "Alt"),
  duplicate_line_up: HotKey("ArrowUp", "Shift", "Alt"),
  duplicate_selection_or_line: HotKey("D", "Mod", "Alt"),
  expand_line_selections: HotKey("E", "Alt"),
  insert_table: HotKey("T", "Shift", "Alt"),
  insert_code_block: HotKey("`", "Mod", "Shift"),
  insert_line_above: HotKey("Enter", "Ctrl", "Shift"),
  insert_line_below: HotKey("Enter", "Shift"),
  insert_ordinal_numbering: HotKey("N", "Shift", "Alt"),
  join_selected_lines: HotKey("J", "Mod", "Shift"),
  move_line_down: HotKey("ArrowDown", "Alt"),
  move_line_up: HotKey("ArrowUp", "Alt"),
  multi_toggle_bold: HotKey("B", "Mod", "Shift"),
  multi_toggle_code: HotKey("C", "Mod", "Shift"),
  multi_toggle_comment: HotKey("/", "Mod", "Shift"),
  multi_toggle_highlight: HotKey("H", "Mod", "Shift"),
  multi_toggle_italic: HotKey("I", "Mod", "Shift"),
  multi_toggle_strikethrough: HotKey("M", "Mod", "Shift"),
  open_all_foldable_callouts: HotKey("O", "Shift", "Alt"),
  open_dev_tools: HotKey("F12"),
  open_keyshots_settings_tab: HotKey(",", "Mod", "Alt"),
  replace_by_regex: HotKey("H", "Mod", "Alt"),
  reverse_selected_lines: HotKey("R", "Alt"),
  search_by_regex: HotKey("F", "Mod", "Alt"),
  select_all_word_instances: HotKey("L", "Mod", "Shift"),
  select_multiple_word_instances: HotKey("D", "Mod"),
  shuffle_selected_lines: HotKey("S", "Mod", "Shift", "Alt"),
  sort_selected_lines: HotKey("S", "Mod", "Shift"),
  split_selections_by_lines: HotKey("L", "Mod", "Alt"),
  split_selections_on_new_line: HotKey("S", "Alt"),
  switch_inline_title_setting: HotKey("T", "Mod", "Alt"),
  switch_keyshots_case_sensitivity: HotKey("I", "Mod", "Alt"),
  switch_line_numbers_setting: HotKey("N", "Mod", "Alt"),
  switch_readable_length_setting: HotKey("R", "Mod", "Alt"),
  toggle_all_callouts_fold_state: HotKey("K", "Shift", "Alt"),
  toggle_case_jetbrains: HotKey("U", "Ctrl", "Shift"),
  toggle_kebabcase: HotKey("-", "Alt"),
  toggle_keyboard_input: HotKey("K", "Mod", "Shift"),
  toggle_snakecase: HotKey("-", "Shift", "Alt"),
  toggle_underline: HotKey("N", "Alt"),
  toggle_uri_encoded_or_decoded: HotKey("U", "Mod", "Alt"),
  transform_selections_to_lowercase: HotKey("L", "Alt"),
  transform_selections_to_titlecase: HotKey("C", "Alt"),
  transform_selections_to_uppercase: HotKey("U", "Alt"),
  trim_selections: HotKey("T", "Alt")
};
var KEYSHOTS_MAPS = {
  "clear": {},
  "keyshots": DEFAULT_MAP,
  "vscode": {
    add_caret_down: HotKey("ArrowDown", "Mod", "Alt"),
    add_caret_up: HotKey("ArrowUp", "Mod", "Alt"),
    duplicate_line_down: HotKey("ArrowDown", "Shift", "Alt"),
    duplicate_line_up: HotKey("ArrowUp", "Shift", "Alt"),
    duplicate_selection_or_line: void 0,
    expand_line_selections: HotKey("L", "Mod"),
    insert_line_above: HotKey("Enter", "Mod", "Shift"),
    insert_line_below: HotKey("Enter", "Mod"),
    join_selected_lines: HotKey("J", "Mod"),
    move_line_down: HotKey("ArrowDown", "Alt"),
    move_line_up: HotKey("ArrowUp", "Alt"),
    select_all_word_instances: HotKey("L", "Mod", "Shift"),
    select_multiple_word_instances: HotKey("D", "Mod"),
    toggle_case_jetbrains: void 0
  },
  "jetbrains": {
    add_caret_down: void 0,
    add_caret_up: void 0,
    duplicate_line_down: void 0,
    duplicate_line_up: void 0,
    duplicate_selection_or_line: HotKey("D", "Mod"),
    expand_line_selections: HotKey("W", "Mod"),
    insert_line_above: HotKey("Enter", "Mod", "Alt"),
    insert_line_below: HotKey("Enter", "Shift"),
    join_selected_lines: HotKey("J", "Mod", "Shift"),
    move_line_down: HotKey("ArrowDown", "Shift", "Alt"),
    move_line_up: HotKey("ArrowUp", "Shift", "Alt"),
    select_all_word_instances: HotKey("J", "Mod", "Shift", "Alt"),
    select_multiple_word_instances: HotKey("J", "Alt"),
    toggle_case_jetbrains: HotKey("U", "Mod", "Shift")
  },
  "visual_studio": {
    add_caret_down: HotKey("ArrowDown", "Shift", "Alt"),
    add_caret_up: HotKey("ArrowUp", "Shift", "Alt"),
    duplicate_line_down: void 0,
    duplicate_line_up: void 0,
    duplicate_selection_or_line: HotKey("D", "Mod"),
    expand_line_selections: HotKey("=", "Shift", "Alt"),
    insert_line_above: HotKey("Enter", "Mod"),
    insert_line_below: HotKey("Enter", "Shift"),
    move_line_down: HotKey("ArrowDown", "Alt"),
    move_line_up: HotKey("ArrowUp", "Alt"),
    select_all_word_instances: HotKey(";", "Shift", "Alt"),
    select_multiple_word_instances: HotKey(".", "Shift", "Alt"),
    toggle_case_jetbrains: void 0,
    transform_selections_to_lowercase: HotKey("U", "Mod"),
    transform_selections_to_uppercase: HotKey("U", "Mod", "Shift")
  }
};
var mapBySettings = (plugin) => {
  return ["clear", "keyshots"].contains(plugin.settings.ide_mappings) ? KEYSHOTS_MAPS[plugin.settings.ide_mappings] : { ...plugin.settings.keyshot_mappings ? DEFAULT_MAP : {}, ...KEYSHOTS_MAPS[plugin.settings.ide_mappings] };
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  ide_mappings: "clear",
  keyshot_mappings: true,
  case_sensitive: true,
  shuffle_rounds_amount: 10,
  carets_via_double_ctrl: false,
  quick_switch_via_double_shift: false
};

// src/commands.ts
var import_obsidian9 = require("obsidian");

// src/classes/editor-position-manipulator.ts
var EditorPositionManipulator = class {
  constructor(position, editor) {
    this.ch = position.ch;
    this.line = position.line;
    this.editor = editor;
  }
  clone() {
    return new EditorPositionManipulator({ ch: this.ch, line: this.line }, this.editor);
  }
  equals(pos) {
    return this.line === pos.line && this.ch === pos.ch;
  }
  asEditorRange() {
    return { from: this, to: this };
  }
  getLine() {
    return this.editor.getLine(this.line);
  }
  setLine(text) {
    this.editor.setLine(this.line, text);
    return this;
  }
  movePos(line, ch) {
    this.line += line;
    this.ch += ch;
    return this;
  }
  setPos(line, ch) {
    this.line = line;
    this.ch = ch;
    return this;
  }
  toOffset() {
    return this.editor.posToOffset(this);
  }
  static documentStart(editor) {
    return new EditorPositionManipulator({ ch: 0, line: 0 }, editor);
  }
};

// src/classes/editor-selection-manipulator.ts
var EditorSelectionManipulator = class {
  constructor(selection, editor) {
    this.sizeChange = 0;
    this.anchor = new EditorPositionManipulator(selection.anchor, editor);
    this.head = new EditorPositionManipulator(selection.head, editor);
    this.editor = editor;
  }
  clone() {
    return new EditorSelectionManipulator({ anchor: this.anchor.clone(), head: this.head.clone() }, this.editor);
  }
  equals(sel) {
    return this.anchor.equals(sel.anchor) && this.head.equals(sel.head);
  }
  isCaret() {
    return this.anchor.ch === this.head.ch && this.anchor.line === this.head.line;
  }
  isNormalized() {
    return !(this.isOneLine() && this.anchor.ch > this.head.ch || this.anchor.line > this.head.line);
  }
  isOneLine() {
    return this.anchor.line === this.head.line;
  }
  isOnSameLine(sel) {
    return this.asNormalized().head.line === sel.asNormalized().anchor.line;
  }
  normalize() {
    if (!this.isNormalized()) {
      const [tAnchor, tHead] = [this.anchor, this.head];
      this.anchor = tHead;
      this.head = tAnchor;
    }
    return this;
  }
  asNormalized() {
    return this.clone().normalize();
  }
  expand() {
    this.anchor.ch = this.isNormalized() ? 0 : this.editor.getLine(this.anchor.line).length;
    this.head.ch = this.isNormalized() ? this.editor.getLine(this.head.line).length : 0;
    return this;
  }
  asEditorRange() {
    return { from: this.anchor, to: this.head };
  }
  asFromToPoints() {
    const norm = this.asNormalized();
    return [norm.anchor, norm.head];
  }
  toEditorSelection() {
    return { anchor: this.anchor, head: this.head };
  }
  moveLines(anchor, head) {
    this.anchor.line += anchor;
    this.head.line += head != null ? head : anchor;
    return this;
  }
  moveChars(anchor, head) {
    this.anchor = new EditorPositionManipulator(this.editor.offsetToPos(this.editor.posToOffset(this.anchor) + anchor), this.editor);
    this.head = new EditorPositionManipulator(this.editor.offsetToPos(this.editor.posToOffset(this.head) + (head != null ? head : anchor)), this.editor);
    return this;
  }
  setLines(anchor, head) {
    this.anchor.line = anchor;
    this.head.line = head != null ? head : anchor;
    return this;
  }
  setChars(anchor, head) {
    this.anchor.ch = anchor;
    this.head.ch = head != null ? head : anchor;
    return this;
  }
  getText() {
    return this.editor.getRange(...this.asFromToPoints());
  }
  replaceText(to, resize = false) {
    this.sizeChange = to.length - this.getText().length;
    this.editor.replaceRange(to, ...this.asFromToPoints());
    if (resize)
      this.moveChars(0, this.sizeChange);
    return this;
  }
  selectWord() {
    var _a, _b;
    if (this.isCaret()) {
      const txt = this.anchor.getLine();
      const postCh = ((_a = txt.substring(this.anchor.ch).match(/^[^ ()[\]{},;]+/i)) != null ? _a : [""])[0].length;
      const preCh = ((_b = txt.substring(0, this.anchor.ch).match(/[^ ()[\]{},;]+$/i)) != null ? _b : [""])[0].length;
      this.moveChars(-preCh, postCh);
    }
    return this;
  }
  collapse() {
    if (!this.isCaret())
      this.head = this.anchor.clone();
    return this;
  }
  get linesCount() {
    const norm = this.asNormalized();
    return norm.head.line - norm.anchor.line + 1;
  }
  get replaceSizeChange() {
    return this.sizeChange;
  }
  static listSelections(editor) {
    return editor.listSelections().map((s) => new EditorSelectionManipulator(s, editor));
  }
  static documentStart(editor) {
    return new EditorSelectionManipulator({
      anchor: EditorPositionManipulator.documentStart(editor),
      head: EditorPositionManipulator.documentStart(editor)
    }, editor);
  }
};

// src/functions.ts
var import_obsidian = require("obsidian");

// src/classes/selections-processing.ts
var SelectionsProcessing = class {
  static selectionsProcessor(editor, arrCallback, fct) {
    const selections = EditorSelectionManipulator.listSelections(editor);
    const newSelections = [];
    let lastSelection = void 0;
    let shift = 0;
    (arrCallback ? arrCallback(selections) : selections).forEach((sel, index) => {
      if (lastSelection && lastSelection.isOnSameLine(sel) && sel.isOneLine()) {
        shift += lastSelection.replaceSizeChange;
        sel.moveChars(shift);
      } else if (lastSelection && lastSelection.isOnSameLine(sel)) {
        shift += lastSelection.replaceSizeChange;
        sel.moveChars(shift, 0);
        shift = 0;
      } else
        shift = 0;
      lastSelection = fct(sel.clone(), index);
      newSelections.push(lastSelection.toEditorSelection());
    });
    if (newSelections.length > 0)
      editor.setSelections(newSelections);
  }
  static selectionsReplacer(editor, fct) {
    this.selectionsProcessor(editor, (arr) => arr.filter((s) => !s.isCaret()), (sel) => sel.replaceText(fct(sel.getText()), true));
  }
  static selectionsUpdater(editor, arrCallback, fct) {
    const selections = EditorSelectionManipulator.listSelections(editor);
    const newSelections = [];
    (arrCallback ? arrCallback(selections) : selections).forEach((sel, index) => newSelections.push(...fct(new EditorSelectionManipulator(sel, editor), index).map((sel2) => sel2.toEditorSelection())));
    if (newSelections.length > 0)
      editor.setSelections(newSelections);
  }
  static lowestSelection(selections) {
    return selections.sort((a, b) => a.asNormalized().head.toOffset() - b.asNormalized().head.toOffset()).reverse()[0];
  }
  static selectionValuesEqual(selections, case_sensitive) {
    return selections.every((val, _i, arr) => {
      const [one, two] = [arr[0], val].map((s) => s.asNormalized().getText());
      if (!case_sensitive)
        return one.toLowerCase() === two.toLowerCase();
      return one === two;
    });
  }
};

// src/functions.ts
function moveLine(editor, direction, border) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    if (direction === 1 ? sel.asNormalized().head.line === border : sel.asNormalized().anchor.line === border)
      return sel;
    const replaceSel = sel.asNormalized().moveLines(direction === -1 ? direction : 0, direction === 1 ? direction : 0).expand();
    const tx = replaceSel.getText();
    if (sel.isCaret())
      replaceSel.replaceText(tx.split("\n").reverse().join("\n"));
    else {
      const pieces = [
        tx.split("\n").slice(...direction === 1 ? [-1] : [0, 1])[0],
        tx.split("\n").slice(...direction === 1 ? [void 0, -1] : [1]).join("\n")
      ];
      if (direction === -1)
        pieces.reverse();
      replaceSel.replaceText(pieces.join("\n"));
    }
    return sel.moveLines(direction);
  });
}
function jetBrainsDuplicate(editor) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    if (sel.isCaret()) {
      const tx = sel.anchor.getLine();
      sel.anchor.setLine(tx + "\n" + tx);
      return sel.moveLines(1);
    } else {
      const tx = sel.asNormalized().getText();
      return sel.asNormalized().replaceText(tx + tx).moveChars(tx.length);
    }
  });
}
function vscodeDuplicate(editor, direction) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    if (sel.isCaret()) {
      const tx = sel.anchor.getLine();
      sel.anchor.setLine(tx + "\n" + tx);
      if (direction > 0)
        return sel.moveLines(1);
    } else {
      const replaceSel = sel.asNormalized().expand();
      const tx = replaceSel.getText();
      replaceSel.replaceText(tx + "\n" + tx);
      if (direction > 0)
        return sel.moveLines(sel.linesCount + 1);
    }
    return sel;
  });
}
function addCarets(editor, direction, border) {
  const selections = EditorSelectionManipulator.listSelections(editor).sort((a, b) => a.anchor.toOffset() - b.anchor.toOffset());
  if (selections.filter((s) => !s.isCaret()).length > 0)
    return;
  const main = selections.filter((s) => s.anchor.line === editor.getCursor().line && s.anchor.ch === editor.getCursor().ch)[0];
  let mainIndex = selections.indexOf(main);
  const newSel = selections[direction > 0 ? selections.length - 1 : 0].clone();
  if (newSel.anchor.line === border)
    return;
  newSel.moveLines(direction).setChars(Math.min(editor.getLine(newSel.anchor.line).length, main.anchor.ch));
  if (direction === 1 /* DOWN */ && mainIndex !== 0)
    selections.shift();
  else if (direction === -1 /* UP */ && mainIndex !== selections.length - 1)
    selections.pop();
  else if (direction === 1 /* DOWN */)
    selections.push(newSel);
  else {
    selections.unshift(newSel);
    mainIndex++;
  }
  selections.splice(mainIndex, 1);
  selections.unshift(main);
  editor.setSelections(selections);
  editor.scrollIntoView(newSel.anchor.clone().setPos(Math.min(editor.lineCount() - 1, newSel.anchor.line + direction * 2), newSel.anchor.ch).asEditorRange());
}
function insertLine(editor, direction) {
  SelectionsProcessing.selectionsProcessor(editor, (s) => s.sort((a, b) => a.anchor.line - b.anchor.line), (sel, index) => {
    const a = (ln) => {
      const tx = [editor.getLine(ln), "\n"];
      if (direction < 0)
        tx.reverse();
      editor.setLine(ln, tx.join(""));
      return EditorSelectionManipulator.documentStart(editor).setLines(ln + (direction > 0 ? direction : 0));
    };
    if (sel.isCaret())
      return a(sel.anchor.line + index);
    else {
      const normSel = sel.asNormalized();
      return a((direction > 0 ? normSel.anchor.line : normSel.head.line) + index);
    }
  });
}
function flipBooleanSetting(app2, setting) {
  app2.vault.setConfig(setting, !app2.vault.getConfig(setting));
}
function replaceSelections(editor, transformFct) {
  SelectionsProcessing.selectionsReplacer(editor, transformFct);
}
function convertURI(editor) {
  SelectionsProcessing.selectionsReplacer(editor, (s) => {
    try {
      const decoded = decodeURI(s);
      if (decoded === s)
        return encodeURI(s);
      return decoded;
    } catch (e) {
      return encodeURI(s);
    }
  });
}
function splitSelectedTextOnNewLine(editor) {
  let index = 0;
  SelectionsProcessing.selectionsProcessor(editor, (arr) => arr.sort((a, b) => a.anchor.line - b.anchor.line), (sel) => {
    if (sel.isCaret())
      return sel;
    else {
      const replaceSel = sel.moveLines(index).normalize();
      const tx = replaceSel.getText();
      replaceSel.replaceText("\n" + tx + "\n");
      index += (tx.split("\n") || []).length + 1;
      return sel.moveLines(1).expand();
    }
  });
}
function sortSelectedLines(editor) {
  SelectionsProcessing.selectionsProcessor(editor, (arr) => arr.filter((s) => !s.isCaret()), (sel) => {
    const replaceSel = sel.asNormalized().expand();
    replaceSel.replaceText(replaceSel.getText().split("\n").sort((a, b) => a.localeCompare(b, void 0, { numeric: true, sensitivity: "base" })).join("\n"));
    return sel;
  });
}
function selectWordInstances(editor, case_sensitive) {
  var _a, _b;
  const selections = EditorSelectionManipulator.listSelections(editor);
  let range;
  if (selections.filter((s) => s.isCaret()).length > 0) {
    selections.filter((s) => s.isCaret()).forEach((sel, i) => selections[i] = sel.selectWord());
  } else if (selections.filter((s) => !s.isCaret()).length === selections.length && SelectionsProcessing.selectionValuesEqual(selections, case_sensitive)) {
    const sel = SelectionsProcessing.lowestSelection(selections).normalize();
    const tx = !case_sensitive ? sel.getText().toLowerCase() : sel.getText();
    const match = (!case_sensitive ? editor.getValue().toLowerCase() : editor.getValue()).substring(sel.head.toOffset()).match(tx);
    if (match !== null) {
      const matchSel = EditorSelectionManipulator.documentStart(editor).setChars(sel.head.toOffset()).moveChars((_a = match.index) != null ? _a : 0, ((_b = match.index) != null ? _b : 0) + tx.length);
      selections.push(matchSel);
      range = matchSel.asEditorRange();
    } else {
      let editorSearchText = !case_sensitive ? editor.getValue().toLowerCase() : editor.getValue();
      let shift = 0;
      let match2 = editorSearchText.match(tx);
      while (match2 !== null) {
        const prevTx = (!case_sensitive ? editor.getValue().toLowerCase() : editor.getValue()).substring(0, shift + ((match2 == null ? void 0 : match2.index) || 0));
        const sel2 = EditorSelectionManipulator.documentStart(editor).moveChars(prevTx.length, prevTx.length + tx.length);
        if (selections.filter((s) => s.equals(sel2)).length === 0) {
          selections.push(sel2);
          range = sel2.asEditorRange();
          break;
        } else {
          shift += ((match2 == null ? void 0 : match2.index) || 0) + tx.length;
          editorSearchText = editorSearchText.substring(((match2 == null ? void 0 : match2.index) || 0) + tx.length);
        }
        match2 = editorSearchText.match(tx);
      }
    }
  } else
    return;
  editor.setSelections(selections);
  if (range !== void 0)
    editor.scrollIntoView(range);
}
function selectAllWordInstances(editor, case_sensitive) {
  const selections = EditorSelectionManipulator.listSelections(editor);
  selections.filter((s) => s.isCaret()).forEach((sel, i) => selections[i] = sel.selectWord());
  if (selections.filter((s) => !s.isCaret()).length === selections.length && SelectionsProcessing.selectionValuesEqual(selections, case_sensitive)) {
    const tx = selections[0].getText();
    Array.from(editor.getValue().matchAll(new RegExp(tx, "g" + (case_sensitive ? "" : "i"))), (v) => v.index || 0).forEach((v) => {
      selections.push(EditorSelectionManipulator.documentStart(editor).moveChars(v, v + tx.length));
    });
  } else
    return;
  editor.setSelections(selections);
}
function expandSelections(editor) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => sel.expand());
}
async function toggleCaseSensitivity(plugin) {
  plugin.settings.case_sensitive = !plugin.settings.case_sensitive;
  const val = plugin.settings.case_sensitive;
  new import_obsidian.Notice(`${val ? "\u{1F512}" : "\u{1F513}"} Keyshots actions are now case ${val ? "" : "in"}sensitive!`);
  await plugin.saveSettings();
}
function splitSelectionsByLines(editor) {
  SelectionsProcessing.selectionsUpdater(editor, void 0, (sel) => {
    const selections = [];
    if (sel.isCaret() || sel.isOneLine())
      selections.push(sel);
    else {
      sel.normalize();
      selections.push(sel.clone().setLines(sel.anchor.line).setChars(sel.anchor.ch, editor.getLine(sel.anchor.line).length));
      for (let i = sel.anchor.line + 1; i < sel.head.line; i++)
        selections.push(sel.clone().setLines(i).setChars(0, editor.getLine(i).length));
      selections.push(sel.clone().setLines(sel.head.line).setChars(0, sel.head.ch));
    }
    return selections;
  });
}
function shuffleSelectedLines(editor, rounds) {
  SelectionsProcessing.selectionsProcessor(editor, (arr) => arr.filter((s) => !s.isCaret()), (sel) => {
    const replaceSel = sel.asNormalized().expand();
    let txt = replaceSel.getText();
    for (let i = 0; i < rounds; i++)
      txt = txt.split("\n").sort(() => Math.random() - 0.5).join("\n");
    replaceSel.replaceText(txt);
    return sel;
  });
}
function openKeyshotsSettings(app2) {
  if (app2.setting.activeTab === null)
    app2.setting.open();
  app2.setting.openTabById("keyshots");
}
function convertOneToOtherChars(editor, first, second) {
  replaceSelections(editor, (tx) => {
    const [underI, spaceI] = [tx.indexOf(first), tx.indexOf(second)];
    const replaceFromTo = (s, ch1, ch2) => s.replace(new RegExp(ch1, "gm"), ch2);
    if (underI !== -1 || spaceI !== -1)
      return tx;
    if (underI === -1)
      return replaceFromTo(tx, second, first);
    if (spaceI === -1)
      replaceFromTo(tx, first, second);
    if (underI > spaceI)
      return replaceFromTo(tx, second, first);
    return replaceFromTo(tx, first, second);
  });
}
function surroundWithChars(editor, chars, endchars) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    const surroundSel = sel.clone().normalize().moveChars(-chars.length, (endchars != null ? endchars : chars).length);
    if (surroundSel.getText().startsWith(chars) && surroundSel.getText().endsWith(endchars != null ? endchars : chars)) {
      return surroundSel.replaceText(surroundSel.getText().substring(chars.length, surroundSel.getText().length - (endchars != null ? endchars : chars).length)).moveChars(0, -chars.length - (endchars != null ? endchars : chars).length);
    }
    return sel.replaceText(chars + sel.getText() + (endchars != null ? endchars : chars)).moveChars(chars.length, sel.isOneLine() ? chars.length : 0);
  });
}
function insertCodeBlock(editor, lang) {
  let moveLine2 = 0;
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    sel.moveLines(moveLine2);
    moveLine2 += sel.linesCount + 1;
    return sel.normalize().replaceText(`
\`\`\`${lang.id}
${sel.getText()}
\`\`\`
`).moveLines(2).setChars(0).expand();
  });
  editor.focus();
}
function addCaretsViaDoubleKey(plugin, ev) {
  if (!["ArrowUp", "ArrowDown"].includes(ev.key))
    return;
  ev.preventDefault();
  const view = plugin.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
  if (!view)
    return;
  addCarets(view.editor, ev.key === "ArrowUp" ? -1 /* UP */ : 1 /* DOWN */, ev.key === "ArrowUp" ? 0 : view.editor.lineCount());
}
function runCommandById(keyshotsPlugin, id, notAvailableCallback) {
  const plugin = keyshotsPlugin.app.internalPlugins.plugins[id.split(":")[0]];
  if (plugin && plugin.enabled)
    keyshotsPlugin.app.commands.executeCommandById(id);
  else
    notAvailableCallback();
}
function insertOrdinalNumbering(editor) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel, index) => {
    return sel.replaceText((index + 1).toString(), true);
  });
}
function reverseSelectedLines(editor) {
  SelectionsProcessing.selectionsProcessor(editor, (arr) => arr.filter((s) => !s.isCaret()), (sel) => {
    const replaceSel = sel.asNormalized().expand();
    replaceSel.replaceText(replaceSel.getText().split("\n").reverse().join("\n"));
    return sel;
  });
}
function insertCallout(editor, id) {
  let moveLine2 = 0;
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => {
    sel.moveLines(moveLine2);
    moveLine2 += sel.linesCount - 2;
    return sel.normalize().replaceText(`
>[!${id}]
${sel.getText().split("\n").map((p) => "> " + p).join("\n")}
`).moveLines(2).expand().moveChars(2, 0);
  });
  editor.focus();
}
function insertTable(editor, rows, column) {
  SelectionsProcessing.selectionsProcessor(editor, void 0, (sel) => sel.normalize().replaceText(`
|${"     |".repeat(column)}
|${" --- |".repeat(column)}${("\n|" + "     |".repeat(column)).repeat(rows)}
`).moveLines(1).moveChars(2));
  editor.focus();
}
function replaceRegex(editor, regex, replacer, onlySelection) {
  if (onlySelection)
    SelectionsProcessing.selectionsReplacer(editor, (val) => val.replace(regex, replacer));
  else
    editor.setValue(editor.getValue().replace(regex, replacer));
  editor.focus();
}
function selectByRegex(editor, regex, onlySelection) {
  const selections = [];
  if (onlySelection) {
    EditorSelectionManipulator.listSelections(editor).forEach((sel) => {
      Array.from(sel.getText().matchAll(regex)).forEach((value) => {
        var _a;
        const i = (_a = value.index) != null ? _a : 0;
        selections.push(EditorSelectionManipulator.documentStart(editor).moveChars(sel.asNormalized().anchor.toOffset()).moveChars(i, i + value[0].length));
      });
    });
  } else {
    Array.from(editor.getValue().matchAll(regex)).forEach((value) => {
      var _a;
      const i = (_a = value.index) != null ? _a : 0;
      selections.push(EditorSelectionManipulator.documentStart(editor).moveChars(i, i + value[0].length));
    });
  }
  editor.setSelections(selections.map((v) => v.toEditorSelection()));
  editor.focus();
}
function countRegexMatches(editor, regex, onlySelection) {
  return (onlySelection ? EditorSelectionManipulator.listSelections(editor).map((s) => s.getText()) : [editor.getValue()]).map((v) => (v.match(regex) || []).length).reduce((part, a) => part + a, 0);
}

// src/components/ide-preset-modal.ts
var import_obsidian2 = require("obsidian");

// src/svgs.ts
var VSCODE_SVG = `

<svg height="32" width="32" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<mask id="mask0" mask-type="alpha" maskUnits="userSpaceOnUse" x="0" y="0" width="100" height="100">
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.9119 99.3171C72.4869 99.9307 74.2828 99.8914 75.8725 99.1264L96.4608 89.2197C98.6242 88.1787 100 85.9892 100 83.5872V16.4133C100 14.0113 98.6243 11.8218 96.4609 10.7808L75.8725 0.873756C73.7862 -0.130129 71.3446 0.11576 69.5135 1.44695C69.252 1.63711 69.0028 1.84943 68.769 2.08341L29.3551 38.0415L12.1872 25.0096C10.589 23.7965 8.35363 23.8959 6.86933 25.2461L1.36303 30.2549C-0.452552 31.9064 -0.454633 34.7627 1.35853 36.417L16.2471 50.0001L1.35853 63.5832C-0.454633 65.2374 -0.452552 68.0938 1.36303 69.7453L6.86933 74.7541C8.35363 76.1043 10.589 76.2037 12.1872 74.9905L29.3551 61.9587L68.769 97.9167C69.3925 98.5406 70.1246 99.0104 70.9119 99.3171ZM75.0152 27.2989L45.1091 50.0001L75.0152 72.7012V27.2989Z" fill="white"/>
</mask>
<g mask="url(#mask0)">
<path d="M96.4614 10.7962L75.8569 0.875542C73.4719 -0.272773 70.6217 0.211611 68.75 2.08333L1.29858 63.5832C-0.515693 65.2373 -0.513607 68.0937 1.30308 69.7452L6.81272 74.754C8.29793 76.1042 10.5347 76.2036 12.1338 74.9905L93.3609 13.3699C96.086 11.3026 100 13.2462 100 16.6667V16.4275C100 14.0265 98.6246 11.8378 96.4614 10.7962Z" fill="#0065A9"/>
<g filter="url(#filter0_d)">
<path d="M96.4614 89.2038L75.8569 99.1245C73.4719 100.273 70.6217 99.7884 68.75 97.9167L1.29858 36.4169C-0.515693 34.7627 -0.513607 31.9063 1.30308 30.2548L6.81272 25.246C8.29793 23.8958 10.5347 23.7964 12.1338 25.0095L93.3609 86.6301C96.086 88.6974 100 86.7538 100 83.3334V83.5726C100 85.9735 98.6246 88.1622 96.4614 89.2038Z" fill="#007ACC"/>
</g>
<g filter="url(#filter1_d)">
<path d="M75.8578 99.1263C73.4721 100.274 70.6219 99.7885 68.75 97.9166C71.0564 100.223 75 98.5895 75 95.3278V4.67213C75 1.41039 71.0564 -0.223106 68.75 2.08329C70.6219 0.211402 73.4721 -0.273666 75.8578 0.873633L96.4587 10.7807C98.6234 11.8217 100 14.0112 100 16.4132V83.5871C100 85.9891 98.6234 88.1786 96.4586 89.2196L75.8578 99.1263Z" fill="#1F9CF0"/>
</g>
<g style="mix-blend-mode:overlay" opacity="0.25">
<path fill-rule="evenodd" clip-rule="evenodd" d="M70.8511 99.3171C72.4261 99.9306 74.2221 99.8913 75.8117 99.1264L96.4 89.2197C98.5634 88.1787 99.9392 85.9892 99.9392 83.5871V16.4133C99.9392 14.0112 98.5635 11.8217 96.4001 10.7807L75.8117 0.873695C73.7255 -0.13019 71.2838 0.115699 69.4527 1.44688C69.1912 1.63705 68.942 1.84937 68.7082 2.08335L29.2943 38.0414L12.1264 25.0096C10.5283 23.7964 8.29285 23.8959 6.80855 25.246L1.30225 30.2548C-0.513334 31.9064 -0.515415 34.7627 1.29775 36.4169L16.1863 50L1.29775 63.5832C-0.515415 65.2374 -0.513334 68.0937 1.30225 69.7452L6.80855 74.754C8.29285 76.1042 10.5283 76.2036 12.1264 74.9905L29.2943 61.9586L68.7082 97.9167C69.3317 98.5405 70.0638 99.0104 70.8511 99.3171ZM74.9544 27.2989L45.0483 50L74.9544 72.7012V27.2989Z" fill="url(#paint0_linear)"/>
</g>
</g>
<defs>
<filter id="filter0_d" x="-8.39411" y="15.8291" width="116.727" height="92.2456" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
<feOffset/>
<feGaussianBlur stdDeviation="4.16667"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="overlay" in2="BackgroundImageFix" result="effect1_dropShadow"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
</filter>
<filter id="filter1_d" x="60.4167" y="-8.07558" width="47.9167" height="116.151" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/>
<feOffset/>
<feGaussianBlur stdDeviation="4.16667"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="overlay" in2="BackgroundImageFix" result="effect1_dropShadow"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow" result="shape"/>
</filter>
<linearGradient id="paint0_linear" x1="49.9392" y1="0.257812" x2="49.9392" y2="99.7423" gradientUnits="userSpaceOnUse">
<stop stop-color="white"/>
<stop offset="1" stop-color="white" stop-opacity="0"/>
</linearGradient>
</defs>
</svg>
`;
var JETBRAINS_SVG = `
<svg height="32" width="32" viewBox="0 0 180 180" xmlns="http://www.w3.org/2000/svg">
    <linearGradient id="a" gradientUnits="userSpaceOnUse" x1="32.64" x2="82.77" y1="61.16" y2="85.54">
        <stop offset=".21" stop-color="#fe2857"/>
        <stop offset="1" stop-color="#293896"/>
    </linearGradient>
    <linearGradient id="b" gradientUnits="userSpaceOnUse" x1="17.38" x2="82.95" y1="69.86" y2="21.23">
        <stop offset="0" stop-color="#fe2857"/>
        <stop offset=".01" stop-color="#fe2857"/>
        <stop offset=".86" stop-color="#ff318c"/>
    </linearGradient>
    <linearGradient id="c" gradientUnits="userSpaceOnUse" x1="74.17" x2="160.27" y1="21.58" y2="99.76">
        <stop offset=".02" stop-color="#ff318c"/>
        <stop offset=".21" stop-color="#fe2857"/>
        <stop offset=".86" stop-color="#fdb60d"/>
    </linearGradient>
    <linearGradient id="d" gradientUnits="userSpaceOnUse" x1="155.46" x2="55.07" y1="89.8" y2="158.9">
        <stop offset=".01" stop-color="#fdb60d"/>
        <stop offset=".86" stop-color="#fcf84a"/>
    </linearGradient>
    <path d="m81.56 83.71-41.35-35a15 15 0 1 0 -14.47 25.7h.15l.39.12 52.16 15.89a3.53 3.53 0 0 0 1.18.21 3.73 3.73 0 0 0 1.93-6.91z"
          fill="url(#a)"/>
    <path d="m89.85 25.93a10.89 10.89 0 0 0 -16.85-9.18l-50.5 30.66a15 15 0 1 0 17.9 24l45.27-36.89.36-.3a10.93 10.93 0 0 0 3.82-8.29z"
          fill="url(#b)"/>
    <path d="m163.29 92-76.62-73.79a10.91 10.91 0 1 0 -14.81 16l.14.12 81.4 68.58a7.36 7.36 0 0 0 12.09-5.65 7.39 7.39 0 0 0 -2.2-5.26z"
          fill="url(#c)"/>
    <path d="m165.5 97.29a7.35 7.35 0 0 0 -11.67-6l-92.71 45.3a15 15 0 1 0 15.48 25.59l85.73-58.84a7.35 7.35 0 0 0 3.17-6.05z"
          fill="url(#d)"/>
    <path d="m60 60h60v60h-60z"/>
    <g fill="#fff">
        <path d="m66.53 108.75h22.5v3.75h-22.5z"/>
        <path d="m65.59 75.47 1.67-1.58a1.88 1.88 0 0 0 1.47.87c.64 0 1.06-.45 1.06-1.32v-5.92h2.58v5.94a3.44 3.44 0 0 1 -.92 2.63 3.52 3.52 0 0 1 -2.57 1 3.84 3.84 0 0 1 -3.29-1.62z"/>
        <path d="m73.53 67.52h7.53v2.19h-5v1.43h4.49v2h-4.45v1.49h5v2.2h-7.6z"/>
        <path d="m84.73 69.79h-2.8v-2.27h8.21v2.27h-2.81v7.09h-2.6z"/>
        <path d="m66.63 80.58h4.42a3.47 3.47 0 0 1 2.55.83 2.09 2.09 0 0 1 .61 1.52 2.18 2.18 0 0 1 -1.45 2.09 2.27 2.27 0 0 1 1.86 2.29c0 1.69-1.31 2.69-3.55 2.69h-4.44zm5 2.89c0-.52-.42-.8-1.18-.8h-1.29v1.64h1.25c.78 0 1.24-.27 1.24-.81zm-.9 2.66h-1.57v1.73h1.62c.8 0 1.24-.31 1.24-.86-.02-.53-.4-.87-1.27-.87z"/>
        <path d="m75.45 80.58h4.15a4.14 4.14 0 0 1 3.05 1 2.92 2.92 0 0 1 .83 2.18 3 3 0 0 1 -1.93 2.89l2.24 3.35h-3l-1.89-2.84h-.87v2.84h-2.6zm4 4.5c.87 0 1.4-.43 1.4-1.12 0-.75-.55-1.13-1.41-1.13h-1.39v2.27z"/>
        <path d="m87.09 80.51h2.5l4 9.44h-2.79l-.67-1.69h-3.63l-.67 1.74h-2.71zm2.28 5.73-1.05-2.65-1.06 2.65z"/>
        <path d="m94 80.55h2.6v9.37h-2.6z"/>
        <path d="m97.56 80.55h2.44l3.37 5v-5h2.57v9.37h-2.27l-3.53-5.14v5.14h-2.58z"/>
        <path d="m106.37 88.53 1.44-1.73a4.86 4.86 0 0 0 3 1.13c.71 0 1.08-.25 1.08-.65 0-.41-.3-.61-1.59-.91-2-.46-3.53-1-3.53-2.93 0-1.74 1.38-3 3.63-3a5.88 5.88 0 0 1 3.85 1.25l-1.25 1.78a4.56 4.56 0 0 0 -2.62-.92c-.63 0-.94.25-.94.6 0 .43.32.62 1.63.91 2.15.47 3.48 1.17 3.48 2.92 0 1.91-1.51 3-3.78 3a6.56 6.56 0 0 1 -4.4-1.45z"/>
    </g>
    <path d="m0 0h180v180h-180z" fill="none"/>
</svg>
`;
var VS_SVG = `
<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 95.51">
    <defs>
        <style>
            .a{fill:#fff;}.a,.h{fill-rule:evenodd;}.b{mask:url(#a);}.c{fill:#52218a;}.d{fill:#6c33af;}.e{fill:#854cc7;}.f{fill:#b179f1;}.g{opacity:0.25;}.h{fill:url(#b);}
        </style>
        <mask id="a" x="0" y="0" width="96" height="95.51" maskUnits="userSpaceOnUse">
            <g transform="translate(0 -0.25)">
                <path class="a"
                      d="M68.89,95.6a6,6,0,0,0,3.93-.44L92.6,85.65A6,6,0,0,0,96,80.24V15.76a6,6,0,0,0-3.4-5.41L72.82.84A6,6,0,0,0,68.34.55,6,6,0,0,0,66,2L34.12,37.26,15.5,22l-1.63-1.4a4,4,0,0,0-3.61-.83,2.55,2.55,0,0,0-.53.18L2.46,23A4,4,0,0,0,0,26.37c0,.1,0,.2,0,.3V69.33c0,.1,0,.2,0,.3A4,4,0,0,0,2.46,73l7.27,3a2.55,2.55,0,0,0,.53.18,4,4,0,0,0,3.61-.83L15.5,74,34.12,58.74,66,94A6,6,0,0,0,68.89,95.6ZM72,27.68,47.21,48,72,68.32ZM12,34.27,24.41,48,12,61.73Z"></path>
            </g>
        </mask>
        <linearGradient id="b" x1="48" y1="97.75" x2="48" y2="2.25" gradientTransform="matrix(1, 0, 0, -1, 0, 98)"
                        gradientUnits="userSpaceOnUse">
            <stop offset="0" stop-color="#fff"></stop>
            <stop offset="1" stop-color="#fff" stop-opacity="0"></stop>
        </linearGradient>
    </defs>
    <title>BrandVisualStudioWin2019</title>
    <g class="b">
        <path class="c"
              d="M13.87,75.4a4,4,0,0,1-4.14.65L2.46,73A4,4,0,0,1,0,69.33V26.67A4,4,0,0,1,2.46,23l7.27-3a4,4,0,0,1,4.14.65L15.5,22A2.21,2.21,0,0,0,12,23.8V72.2A2.21,2.21,0,0,0,15.5,74Z"
              transform="translate(0 -0.25)"></path>
        <path class="d"
              d="M2.46,73A4,4,0,0,1,0,69.33V69a2.31,2.31,0,0,0,4,1.55L66,2A6,6,0,0,1,72.82.84L92.6,10.36A6,6,0,0,1,96,15.77V16a3.79,3.79,0,0,0-6.19-2.93L15.5,74l-1.63,1.4a4,4,0,0,1-4.14.65Z"
              transform="translate(0 -0.25)"></path>
        <path class="e"
              d="M2.46,23A4,4,0,0,0,0,26.67V27a2.31,2.31,0,0,1,4-1.55L66,94a6,6,0,0,0,6.82,1.16L92.6,85.64A6,6,0,0,0,96,80.23V80a3.79,3.79,0,0,1-6.19,2.93L15.5,22l-1.63-1.4A4,4,0,0,0,9.73,20Z"
              transform="translate(0 -0.25)"></path>
        <path class="f"
              d="M72.82,95.16A6,6,0,0,1,66,94a3.52,3.52,0,0,0,6-2.49v-87A3.52,3.52,0,0,0,66,2,6,6,0,0,1,72.82.84L92.6,10.35A6,6,0,0,1,96,15.76V80.24a6,6,0,0,1-3.4,5.41Z"
              transform="translate(0 -0.25)"></path>
        <g class="g">
            <path class="h"
                  d="M68.89,95.6a6,6,0,0,0,3.93-.44L92.6,85.65A6,6,0,0,0,96,80.24V15.76a6,6,0,0,0-3.4-5.41L72.82.84A6,6,0,0,0,68.34.55,6,6,0,0,0,66,2L34.12,37.26,15.5,22l-1.63-1.4a4,4,0,0,0-3.61-.83,2.55,2.55,0,0,0-.53.18L2.46,23A4,4,0,0,0,0,26.37c0,.1,0,.2,0,.3V69.33c0,.1,0,.2,0,.3A4,4,0,0,0,2.46,73l7.27,3a2.55,2.55,0,0,0,.53.18,4,4,0,0,0,3.61-.83L15.5,74,34.12,58.74,66,94A6,6,0,0,0,68.89,95.6ZM72,27.68,47.21,48,72,68.32ZM12,34.27,24.41,48,12,61.73Z"
                  transform="translate(0 -0.25)"></path>
        </g>
    </g>
</svg> 
`;
var KEYSHOTS_SVG = (size) => `
<svg width="${size}" height="${size}" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_2_2)">
<rect width="100" height="100" rx="8.23529" fill="url(#paint0_linear_2_2)"/>
<g filter="url(#filter0_d_2_2)">
<rect x="11.7647" y="7.05882" width="76.4706" height="76.4706" rx="8.23529" fill="#3F3F3F"/>
</g>
<g filter="url(#filter1_d_2_2)">
<path d="M23.3368 30.3306C25.0654 30.3306 25.9297 29.6898 25.9297 28.4082C25.9297 27.8867 25.7956 27.4769 25.5274 27.1788C25.2741 26.8808 24.7972 26.62 24.0968 26.3965L22.2639 25.7929C20.0733 25.0777 18.978 23.6396 18.978 21.4788C18.978 20.2271 19.3654 19.1988 20.1403 18.3941C20.9301 17.5745 22.1596 17.1647 23.8286 17.1647C24.529 17.1647 25.2219 17.2467 25.9074 17.4106C26.5929 17.5596 27.3231 17.8055 28.098 18.1482L27.2709 20.4506C26.5556 20.1675 25.9447 19.9663 25.438 19.8471C24.9462 19.7129 24.4396 19.6459 23.918 19.6459C23.2325 19.6459 22.6886 19.7726 22.2862 20.0259C21.8988 20.2643 21.705 20.7039 21.705 21.3447C21.705 21.8216 21.8392 22.2165 22.1074 22.5294C22.3905 22.8275 22.8525 23.0808 23.4933 23.2894L25.3262 23.8929C26.429 24.2655 27.256 24.8094 27.8074 25.5247C28.3737 26.2251 28.6568 27.1565 28.6568 28.3188C28.6568 29.66 28.2321 30.7478 27.3827 31.5824C26.5333 32.402 25.1996 32.8118 23.3815 32.8118C22.6662 32.8118 21.9211 32.7298 21.1462 32.5659C20.3862 32.3871 19.5517 32.089 18.6427 31.6718L19.4697 29.3694C20.3043 29.7271 21.0121 29.9804 21.5933 30.1294C22.1894 30.2635 22.7705 30.3306 23.3368 30.3306ZM39.958 32.5882V26.1729H34.2803V32.5882H31.598V17.3882H34.2803V23.6024H39.958V17.3882H42.6403V32.5882H39.958ZM57.5864 23.3788V26.5753C57.5864 28.5126 57.1021 30.04 56.1335 31.1577C55.1648 32.2604 53.7491 32.8118 51.8864 32.8118C50.0088 32.8118 48.5856 32.2604 47.617 31.1577C46.6633 30.04 46.1864 28.5126 46.1864 26.5753V23.3788C46.1864 21.4416 46.6633 19.9216 47.617 18.8188C48.5856 17.7161 50.0088 17.1647 51.8864 17.1647C53.7491 17.1647 55.1648 17.7161 56.1335 18.8188C57.1021 19.9216 57.5864 21.4416 57.5864 23.3788ZM54.837 23.3788C54.837 22.1569 54.5986 21.2404 54.1217 20.6294C53.6448 20.0035 52.8997 19.6906 51.8864 19.6906C50.8731 19.6906 50.128 20.0035 49.6511 20.6294C49.1742 21.2404 48.9358 22.1569 48.9358 23.3788V26.5753C48.9358 27.7973 49.1742 28.7212 49.6511 29.3471C50.128 29.9729 50.8731 30.2859 51.8864 30.2859C52.8997 30.2859 53.6448 29.9729 54.1217 29.3471C54.5986 28.7212 54.837 27.7973 54.837 26.5753V23.3788ZM59.3221 19.9588V17.3882H70.4985V19.9588H66.2515V32.5882H63.5691V19.9588H59.3221ZM76.2068 30.3306C77.9354 30.3306 78.7997 29.6898 78.7997 28.4082C78.7997 27.8867 78.6656 27.4769 78.3973 27.1788C78.144 26.8808 77.6671 26.62 76.9668 26.3965L75.1338 25.7929C72.9432 25.0777 71.8479 23.6396 71.8479 21.4788C71.8479 20.2271 72.2354 19.1988 73.0103 18.3941C73.8001 17.5745 75.0295 17.1647 76.6985 17.1647C77.3989 17.1647 78.0919 17.2467 78.7773 17.4106C79.4628 17.5596 80.193 17.8055 80.9679 18.1482L80.1409 20.4506C79.4256 20.1675 78.8146 19.9663 78.3079 19.8471C77.8162 19.7129 77.3095 19.6459 76.7879 19.6459C76.1024 19.6459 75.5585 19.7726 75.1562 20.0259C74.7687 20.2643 74.575 20.7039 74.575 21.3447C74.575 21.8216 74.7091 22.2165 74.9773 22.5294C75.2605 22.8275 75.7224 23.0808 76.3632 23.2894L78.1962 23.8929C79.2989 24.2655 80.126 24.8094 80.6773 25.5247C81.2436 26.2251 81.5268 27.1565 81.5268 28.3188C81.5268 29.66 81.102 30.7478 80.2526 31.5824C79.4032 32.402 78.0695 32.8118 76.2515 32.8118C75.5362 32.8118 74.7911 32.7298 74.0162 32.5659C73.2562 32.3871 72.4217 32.089 71.5126 31.6718L72.3397 29.3694C73.1742 29.7271 73.882 29.9804 74.4632 30.1294C75.0593 30.2635 75.6405 30.3306 76.2068 30.3306Z" fill="white"/>
</g>
</g>
<defs>
<filter id="filter0_d_2_2" x="2.35294" y="2.35294" width="95.2941" height="95.2941" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="4.70588"/>
<feGaussianBlur stdDeviation="4.70588"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_2_2"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_2_2" result="shape"/>
</filter>
<filter id="filter1_d_2_2" x="12.7603" y="11.2824" width="74.6488" height="27.4118" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset/>
<feGaussianBlur stdDeviation="2.94118"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0.5 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_2_2"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_2_2" result="shape"/>
</filter>
<linearGradient id="paint0_linear_2_2" x1="0" y1="0" x2="100" y2="100" gradientUnits="userSpaceOnUse">
<stop stop-color="#2C2C2C"/>
<stop offset="1" stop-color="#222222"/>
</linearGradient>
<clipPath id="clip0_2_2">
<rect width="100" height="100" fill="white"/>
</clipPath>
</defs>
</svg>
`;
var EMPTY_SVG = `
<svg width="32" height="32" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100">
`;

// src/mappings/ide-info.ts
var IDE_LABELS = {
  "clear": {
    name: "Clear",
    description: "Everything is blank, default preset when you install Keyshots",
    svg_icon_content: EMPTY_SVG
  },
  "keyshots": {
    name: "Keyshots Default Mappings",
    description: "Hotkeys designed by creator of Keyshots that are 100% conflict free with Obsidian",
    svg_icon_content: KEYSHOTS_SVG(32)
  },
  "vscode": {
    name: "Visual Studio Code",
    description: "Compact text editor and light IDE for Web or Python development",
    svg_icon_content: VSCODE_SVG
  },
  "jetbrains": {
    name: "JetBrains IDEs",
    description: "Family of IDEs (IntelliJ IDEA, Pycharm, PhpStorm, WebStorm, ...) made by company JetBrains",
    svg_icon_content: JETBRAINS_SVG
  },
  "visual_studio": {
    name: "Microsoft Visual Studio",
    description: "IDE for making Windows desktop apps, or any other programs using C-Family languages or Visual Basic",
    svg_icon_content: VS_SVG
  }
};

// src/components/ide-preset-modal.ts
var IDEPresetModal = class extends import_obsidian2.SuggestModal {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
    this.setPlaceholder("Choose one of these presets to use...");
  }
  getSuggestions(query) {
    return Object.values(IDE_LABELS).filter((v) => v.name.toLowerCase().includes(query.toLowerCase()));
  }
  async onChooseSuggestion(item, evt) {
    await this.plugin.changePreset(Object.keys(IDE_LABELS).filter((f) => IDE_LABELS[f] === item)[0]);
    new import_obsidian2.Notice(`\u2705 Preset successfully changed to "${item.name}"!`);
  }
  renderSuggestion(value, el) {
    el.setCssProps({ "display": "flex", "gap": "10px", "align-items": "center" });
    el.innerHTML += value.svg_icon_content;
    const desc = el.createEl("div");
    desc.createEl("div", { text: value.name });
    desc.createEl("small", { text: value.description }).setCssProps({ "opacity": "0.8" });
  }
};

// src/mappings/prism-langs.ts
var PRISM_LANGS = [
  {
    id: "",
    name: "Blank"
  },
  ...[
    {
      "id": "markup",
      "name": "Markup"
    },
    {
      "id": "css",
      "name": "CSS"
    },
    {
      "id": "clike",
      "name": "C-like"
    },
    {
      "id": "javascript",
      "name": "JavaScript"
    },
    {
      "id": "abap",
      "name": "ABAP"
    },
    {
      "id": "abnf",
      "name": "ABNF"
    },
    {
      "id": "actionscript",
      "name": "ActionScript"
    },
    {
      "id": "ada",
      "name": "Ada"
    },
    {
      "id": "agda",
      "name": "Agda"
    },
    {
      "id": "al",
      "name": "AL"
    },
    {
      "id": "antlr4",
      "name": "ANTLR4"
    },
    {
      "id": "apacheconf",
      "name": "Apache Configuration"
    },
    {
      "id": "apex",
      "name": "Apex"
    },
    {
      "id": "apl",
      "name": "APL"
    },
    {
      "id": "applescript",
      "name": "AppleScript"
    },
    {
      "id": "aql",
      "name": "AQL"
    },
    {
      "id": "arduino",
      "name": "Arduino"
    },
    {
      "id": "arff",
      "name": "ARFF"
    },
    {
      "id": "armasm",
      "name": "ARM Assembly"
    },
    {
      "id": "arturo",
      "name": "Arturo"
    },
    {
      "id": "asciidoc",
      "name": "AsciiDoc"
    },
    {
      "id": "aspnet",
      "name": "ASP.NET (C#)"
    },
    {
      "id": "asm6502",
      "name": "6502 Assembly"
    },
    {
      "id": "asmatmel",
      "name": "Atmel AVR Assembly"
    },
    {
      "id": "autohotkey",
      "name": "AutoHotkey"
    },
    {
      "id": "autoit",
      "name": "AutoIt"
    },
    {
      "id": "avisynth",
      "name": "AviSynth"
    },
    {
      "id": "avro-idl",
      "name": "Avro IDL"
    },
    {
      "id": "awk",
      "name": "AWK"
    },
    {
      "id": "bash",
      "name": "Bash"
    },
    {
      "id": "basic",
      "name": "BASIC"
    },
    {
      "id": "batch",
      "name": "Batch"
    },
    {
      "id": "bbcode",
      "name": "BBcode"
    },
    {
      "id": "bbj",
      "name": "BBj"
    },
    {
      "id": "bicep",
      "name": "Bicep"
    },
    {
      "id": "birb",
      "name": "Birb"
    },
    {
      "id": "bison",
      "name": "Bison"
    },
    {
      "id": "bnf",
      "name": "BNF"
    },
    {
      "id": "bqn",
      "name": "BQN"
    },
    {
      "id": "brainfuck",
      "name": "Brainfuck"
    },
    {
      "id": "brightscript",
      "name": "BrightScript"
    },
    {
      "id": "bro",
      "name": "Bro"
    },
    {
      "id": "bsl",
      "name": "BSL (1C:Enterprise)"
    },
    {
      "id": "c",
      "name": "C"
    },
    {
      "id": "csharp",
      "name": "C#"
    },
    {
      "id": "cpp",
      "name": "C++"
    },
    {
      "id": "cfscript",
      "name": "CFScript"
    },
    {
      "id": "chaiscript",
      "name": "ChaiScript"
    },
    {
      "id": "cil",
      "name": "CIL"
    },
    {
      "id": "cilkc",
      "name": "Cilk/C"
    },
    {
      "id": "cilkcpp",
      "name": "Cilk/C++"
    },
    {
      "id": "clojure",
      "name": "Clojure"
    },
    {
      "id": "cmake",
      "name": "CMake"
    },
    {
      "id": "cobol",
      "name": "COBOL"
    },
    {
      "id": "coffeescript",
      "name": "CoffeeScript"
    },
    {
      "id": "concurnas",
      "name": "Concurnas"
    },
    {
      "id": "csp",
      "name": "Content-Security-Policy"
    },
    {
      "id": "cooklang",
      "name": "Cooklang"
    },
    {
      "id": "coq",
      "name": "Coq"
    },
    {
      "id": "crystal",
      "name": "Crystal"
    },
    {
      "id": "css-extras",
      "name": "CSS Extras"
    },
    {
      "id": "csv",
      "name": "CSV"
    },
    {
      "id": "cue",
      "name": "CUE"
    },
    {
      "id": "cypher",
      "name": "Cypher"
    },
    {
      "id": "d",
      "name": "D"
    },
    {
      "id": "dart",
      "name": "Dart"
    },
    {
      "id": "dataweave",
      "name": "DataWeave"
    },
    {
      "id": "dax",
      "name": "DAX"
    },
    {
      "id": "dhall",
      "name": "Dhall"
    },
    {
      "id": "diff",
      "name": "Diff"
    },
    {
      "id": "django",
      "name": "Django/Jinja2"
    },
    {
      "id": "dns-zone-file",
      "name": "DNS zone file"
    },
    {
      "id": "docker",
      "name": "Docker"
    },
    {
      "id": "dot",
      "name": "DOT (Graphviz)"
    },
    {
      "id": "ebnf",
      "name": "EBNF"
    },
    {
      "id": "editorconfig",
      "name": "EditorConfig"
    },
    {
      "id": "eiffel",
      "name": "Eiffel"
    },
    {
      "id": "ejs",
      "name": "EJS"
    },
    {
      "id": "elixir",
      "name": "Elixir"
    },
    {
      "id": "elm",
      "name": "Elm"
    },
    {
      "id": "etlua",
      "name": "Embedded Lua templating"
    },
    {
      "id": "erb",
      "name": "ERB"
    },
    {
      "id": "erlang",
      "name": "Erlang"
    },
    {
      "id": "excel-formula",
      "name": "Excel Formula"
    },
    {
      "id": "fsharp",
      "name": "F#"
    },
    {
      "id": "factor",
      "name": "Factor"
    },
    {
      "id": "false",
      "name": "False"
    },
    {
      "id": "firestore-security-rules",
      "name": "Firestore security rules"
    },
    {
      "id": "flow",
      "name": "Flow"
    },
    {
      "id": "fortran",
      "name": "Fortran"
    },
    {
      "id": "ftl",
      "name": "FreeMarker Template Language"
    },
    {
      "id": "gml",
      "name": "GameMaker Language"
    },
    {
      "id": "gap",
      "name": "GAP (CAS)"
    },
    {
      "id": "gcode",
      "name": "G-code"
    },
    {
      "id": "gdscript",
      "name": "GDScript"
    },
    {
      "id": "gedcom",
      "name": "GEDCOM"
    },
    {
      "id": "gettext",
      "name": "gettext"
    },
    {
      "id": "gherkin",
      "name": "Gherkin"
    },
    {
      "id": "git",
      "name": "Git"
    },
    {
      "id": "glsl",
      "name": "GLSL"
    },
    {
      "id": "gn",
      "name": "GN"
    },
    {
      "id": "linker-script",
      "name": "GNU Linker Script"
    },
    {
      "id": "go",
      "name": "Go"
    },
    {
      "id": "go-module",
      "name": "Go module"
    },
    {
      "id": "gradle",
      "name": "Gradle"
    },
    {
      "id": "graphql",
      "name": "GraphQL"
    },
    {
      "id": "groovy",
      "name": "Groovy"
    },
    {
      "id": "haml",
      "name": "Haml"
    },
    {
      "id": "handlebars",
      "name": "Handlebars"
    },
    {
      "id": "haskell",
      "name": "Haskell"
    },
    {
      "id": "haxe",
      "name": "Haxe"
    },
    {
      "id": "hcl",
      "name": "HCL"
    },
    {
      "id": "hlsl",
      "name": "HLSL"
    },
    {
      "id": "hoon",
      "name": "Hoon"
    },
    {
      "id": "http",
      "name": "HTTP"
    },
    {
      "id": "hpkp",
      "name": "HTTP Public-Key-Pins"
    },
    {
      "id": "hsts",
      "name": "HTTP Strict-Transport-Security"
    },
    {
      "id": "ichigojam",
      "name": "IchigoJam"
    },
    {
      "id": "icon",
      "name": "Icon"
    },
    {
      "id": "icu-message-format",
      "name": "ICU Message Format"
    },
    {
      "id": "idris",
      "name": "Idris"
    },
    {
      "id": "ignore",
      "name": ".ignore"
    },
    {
      "id": "inform7",
      "name": "Inform 7"
    },
    {
      "id": "ini",
      "name": "Ini"
    },
    {
      "id": "io",
      "name": "Io"
    },
    {
      "id": "j",
      "name": "J"
    },
    {
      "id": "java",
      "name": "Java"
    },
    {
      "id": "javadoc",
      "name": "JavaDoc"
    },
    {
      "id": "javadoclike",
      "name": "JavaDoc-like"
    },
    {
      "id": "javastacktrace",
      "name": "Java stack trace"
    },
    {
      "id": "jexl",
      "name": "Jexl"
    },
    {
      "id": "jolie",
      "name": "Jolie"
    },
    {
      "id": "jq",
      "name": "JQ"
    },
    {
      "id": "jsdoc",
      "name": "JSDoc"
    },
    {
      "id": "js-extras",
      "name": "JS Extras"
    },
    {
      "id": "json",
      "name": "JSON"
    },
    {
      "id": "json5",
      "name": "JSON5"
    },
    {
      "id": "jsonp",
      "name": "JSONP"
    },
    {
      "id": "jsstacktrace",
      "name": "JS stack trace"
    },
    {
      "id": "js-templates",
      "name": "JS Templates"
    },
    {
      "id": "julia",
      "name": "Julia"
    },
    {
      "id": "keepalived",
      "name": "Keepalived Configure"
    },
    {
      "id": "keyman",
      "name": "Keyman"
    },
    {
      "id": "kotlin",
      "name": "Kotlin"
    },
    {
      "id": "kumir",
      "name": "KuMir (\u041A\u0443\u041C\u0438\u0440)"
    },
    {
      "id": "kusto",
      "name": "Kusto"
    },
    {
      "id": "latex",
      "name": "LaTeX"
    },
    {
      "id": "latte",
      "name": "Latte"
    },
    {
      "id": "less",
      "name": "Less"
    },
    {
      "id": "lilypond",
      "name": "LilyPond"
    },
    {
      "id": "liquid",
      "name": "Liquid"
    },
    {
      "id": "lisp",
      "name": "Lisp"
    },
    {
      "id": "livescript",
      "name": "LiveScript"
    },
    {
      "id": "llvm",
      "name": "LLVM IR"
    },
    {
      "id": "log",
      "name": "Log file"
    },
    {
      "id": "lolcode",
      "name": "LOLCODE"
    },
    {
      "id": "lua",
      "name": "Lua"
    },
    {
      "id": "magma",
      "name": "Magma (CAS)"
    },
    {
      "id": "makefile",
      "name": "Makefile"
    },
    {
      "id": "markdown",
      "name": "Markdown"
    },
    {
      "id": "markup-templating",
      "name": "Markup templating"
    },
    {
      "id": "mata",
      "name": "Mata"
    },
    {
      "id": "matlab",
      "name": "MATLAB"
    },
    {
      "id": "maxscript",
      "name": "MAXScript"
    },
    {
      "id": "mel",
      "name": "MEL"
    },
    {
      "id": "mermaid",
      "name": "Mermaid"
    },
    {
      "id": "metafont",
      "name": "METAFONT"
    },
    {
      "id": "mizar",
      "name": "Mizar"
    },
    {
      "id": "mongodb",
      "name": "MongoDB"
    },
    {
      "id": "monkey",
      "name": "Monkey"
    },
    {
      "id": "moonscript",
      "name": "MoonScript"
    },
    {
      "id": "n1ql",
      "name": "N1QL"
    },
    {
      "id": "n4js",
      "name": "N4JS"
    },
    {
      "id": "nand2tetris-hdl",
      "name": "Nand To Tetris HDL"
    },
    {
      "id": "naniscript",
      "name": "Naninovel Script"
    },
    {
      "id": "nasm",
      "name": "NASM"
    },
    {
      "id": "neon",
      "name": "NEON"
    },
    {
      "id": "nevod",
      "name": "Nevod"
    },
    {
      "id": "nginx",
      "name": "nginx"
    },
    {
      "id": "nim",
      "name": "Nim"
    },
    {
      "id": "nix",
      "name": "Nix"
    },
    {
      "id": "nsis",
      "name": "NSIS"
    },
    {
      "id": "objectivec",
      "name": "Objective-C"
    },
    {
      "id": "ocaml",
      "name": "OCaml"
    },
    {
      "id": "odin",
      "name": "Odin"
    },
    {
      "id": "opencl",
      "name": "OpenCL"
    },
    {
      "id": "openqasm",
      "name": "OpenQasm"
    },
    {
      "id": "oz",
      "name": "Oz"
    },
    {
      "id": "parigp",
      "name": "PARI/GP"
    },
    {
      "id": "parser",
      "name": "Parser"
    },
    {
      "id": "pascal",
      "name": "Pascal"
    },
    {
      "id": "pascaligo",
      "name": "Pascaligo"
    },
    {
      "id": "psl",
      "name": "PATROL Scripting Language"
    },
    {
      "id": "pcaxis",
      "name": "PC-Axis"
    },
    {
      "id": "peoplecode",
      "name": "PeopleCode"
    },
    {
      "id": "perl",
      "name": "Perl"
    },
    {
      "id": "php",
      "name": "PHP"
    },
    {
      "id": "phpdoc",
      "name": "PHPDoc"
    },
    {
      "id": "php-extras",
      "name": "PHP Extras"
    },
    {
      "id": "plant-uml",
      "name": "PlantUML"
    },
    {
      "id": "plsql",
      "name": "PL/SQL"
    },
    {
      "id": "powerquery",
      "name": "PowerQuery"
    },
    {
      "id": "powershell",
      "name": "PowerShell"
    },
    {
      "id": "processing",
      "name": "Processing"
    },
    {
      "id": "prolog",
      "name": "Prolog"
    },
    {
      "id": "promql",
      "name": "PromQL"
    },
    {
      "id": "properties",
      "name": ".properties"
    },
    {
      "id": "protobuf",
      "name": "Protocol Buffers"
    },
    {
      "id": "pug",
      "name": "Pug"
    },
    {
      "id": "puppet",
      "name": "Puppet"
    },
    {
      "id": "pure",
      "name": "Pure"
    },
    {
      "id": "purebasic",
      "name": "PureBasic"
    },
    {
      "id": "purescript",
      "name": "PureScript"
    },
    {
      "id": "python",
      "name": "Python"
    },
    {
      "id": "qsharp",
      "name": "Q#"
    },
    {
      "id": "q",
      "name": "Q (kdb+ database)"
    },
    {
      "id": "qml",
      "name": "QML"
    },
    {
      "id": "qore",
      "name": "Qore"
    },
    {
      "id": "r",
      "name": "R"
    },
    {
      "id": "racket",
      "name": "Racket"
    },
    {
      "id": "cshtml",
      "name": "Razor C#"
    },
    {
      "id": "jsx",
      "name": "React JSX"
    },
    {
      "id": "tsx",
      "name": "React TSX"
    },
    {
      "id": "reason",
      "name": "Reason"
    },
    {
      "id": "regex",
      "name": "Regex"
    },
    {
      "id": "rego",
      "name": "Rego"
    },
    {
      "id": "renpy",
      "name": "Ren'py"
    },
    {
      "id": "rescript",
      "name": "ReScript"
    },
    {
      "id": "rest",
      "name": "reST (reStructuredText)"
    },
    {
      "id": "rip",
      "name": "Rip"
    },
    {
      "id": "roboconf",
      "name": "Roboconf"
    },
    {
      "id": "robotframework",
      "name": "Robot Framework"
    },
    {
      "id": "ruby",
      "name": "Ruby"
    },
    {
      "id": "rust",
      "name": "Rust"
    },
    {
      "id": "sas",
      "name": "SAS"
    },
    {
      "id": "sass",
      "name": "Sass (Sass)"
    },
    {
      "id": "scss",
      "name": "Sass (SCSS)"
    },
    {
      "id": "scala",
      "name": "Scala"
    },
    {
      "id": "scheme",
      "name": "Scheme"
    },
    {
      "id": "shell-session",
      "name": "Shell session"
    },
    {
      "id": "smali",
      "name": "Smali"
    },
    {
      "id": "smalltalk",
      "name": "Smalltalk"
    },
    {
      "id": "smarty",
      "name": "Smarty"
    },
    {
      "id": "sml",
      "name": "SML"
    },
    {
      "id": "solidity",
      "name": "Solidity (Ethereum)"
    },
    {
      "id": "solution-file",
      "name": "Solution file"
    },
    {
      "id": "soy",
      "name": "Soy (Closure Template)"
    },
    {
      "id": "sparql",
      "name": "SPARQL"
    },
    {
      "id": "splunk-spl",
      "name": "Splunk SPL"
    },
    {
      "id": "sqf",
      "name": "SQF: Status Quo Function (Arma 3)"
    },
    {
      "id": "sql",
      "name": "SQL"
    },
    {
      "id": "squirrel",
      "name": "Squirrel"
    },
    {
      "id": "stan",
      "name": "Stan"
    },
    {
      "id": "stata",
      "name": "Stata Ado"
    },
    {
      "id": "iecst",
      "name": "Structured Text (IEC 61131-3)"
    },
    {
      "id": "stylus",
      "name": "Stylus"
    },
    {
      "id": "supercollider",
      "name": "SuperCollider"
    },
    {
      "id": "swift",
      "name": "Swift"
    },
    {
      "id": "systemd",
      "name": "Systemd configuration file"
    },
    {
      "id": "t4-templating",
      "name": "T4 templating"
    },
    {
      "id": "t4-cs",
      "name": "T4 Text Templates (C#)"
    },
    {
      "id": "t4-vb",
      "name": "T4 Text Templates (VB)"
    },
    {
      "id": "tap",
      "name": "TAP"
    },
    {
      "id": "tcl",
      "name": "Tcl"
    },
    {
      "id": "tt2",
      "name": "Template Toolkit 2"
    },
    {
      "id": "textile",
      "name": "Textile"
    },
    {
      "id": "toml",
      "name": "TOML"
    },
    {
      "id": "tremor",
      "name": "Tremor"
    },
    {
      "id": "turtle",
      "name": "Turtle"
    },
    {
      "id": "twig",
      "name": "Twig"
    },
    {
      "id": "typescript",
      "name": "TypeScript"
    },
    {
      "id": "typoscript",
      "name": "TypoScript"
    },
    {
      "id": "unrealscript",
      "name": "UnrealScript"
    },
    {
      "id": "uorazor",
      "name": "UO Razor Script"
    },
    {
      "id": "uri",
      "name": "URI"
    },
    {
      "id": "v",
      "name": "V"
    },
    {
      "id": "vala",
      "name": "Vala"
    },
    {
      "id": "vbnet",
      "name": "VB.Net"
    },
    {
      "id": "velocity",
      "name": "Velocity"
    },
    {
      "id": "verilog",
      "name": "Verilog"
    },
    {
      "id": "vhdl",
      "name": "VHDL"
    },
    {
      "id": "vim",
      "name": "vim"
    },
    {
      "id": "visual-basic",
      "name": "Visual Basic"
    },
    {
      "id": "warpscript",
      "name": "WarpScript"
    },
    {
      "id": "wasm",
      "name": "WebAssembly"
    },
    {
      "id": "web-idl",
      "name": "Web IDL"
    },
    {
      "id": "wgsl",
      "name": "WGSL"
    },
    {
      "id": "wiki",
      "name": "Wiki markup"
    },
    {
      "id": "wolfram",
      "name": "Wolfram language"
    },
    {
      "id": "wren",
      "name": "Wren"
    },
    {
      "id": "xeora",
      "name": "Xeora"
    },
    {
      "id": "xml-doc",
      "name": "XML doc (.net)"
    },
    {
      "id": "xojo",
      "name": "Xojo (REALbasic)"
    },
    {
      "id": "xquery",
      "name": "XQuery"
    },
    {
      "id": "yaml",
      "name": "YAML"
    },
    {
      "id": "yang",
      "name": "YANG"
    },
    {
      "id": "zig",
      "name": "Zig"
    }
  ].sort((a, b) => a.name.localeCompare(b.name))
];

// src/components/abstract/callback-suggest-modal.ts
var import_obsidian3 = require("obsidian");
var CallbackSuggestModal = class extends import_obsidian3.SuggestModal {
  constructor(app2, onSelectCallback) {
    super(app2.app);
    this.onSelectCallback = onSelectCallback;
  }
  onChooseSuggestion(item, evt) {
    this.onSelectCallback(item, evt);
  }
};
var CallbackFuzzySuggestModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app2, onSelectCallback) {
    super(app2.app);
    this.onSelectCallback = onSelectCallback;
  }
  onChooseItem(item, evt) {
    this.onSelectCallback(item, evt);
  }
};

// src/components/code-block-modal.ts
var CodeBlockModal = class extends CallbackFuzzySuggestModal {
  constructor(plugin, onSelectCallback) {
    super(plugin, onSelectCallback);
    this.limit = 1e3;
    this.setPlaceholder("Choose a language that this code block will be written in...");
  }
  getItemText(item) {
    return item.name;
  }
  getItems() {
    return PRISM_LANGS;
  }
};

// src/components/callout-picker-modal.ts
var import_obsidian4 = require("obsidian");
var _CalloutPickerModal = class extends CallbackSuggestModal {
  constructor(plugin, onSelectCallback) {
    super(plugin, onSelectCallback);
    this.setPlaceholder("Select one of the callouts... (callouts are searchable by it's id or aliases)");
  }
  getSuggestions(query) {
    return _CalloutPickerModal.CALLOUTS.filter((ids) => ids.filter((id) => id.includes(query.toLowerCase())).length > 0).map((ids) => ids[0]);
  }
  renderSuggestion(value, el) {
    import_obsidian4.MarkdownRenderer.renderMarkdown(`>[!${value}]`, el, "", new import_obsidian4.Component()).then(() => {
      const callout = el.childNodes.item(0);
      callout.setCssProps({ "margin": "0" });
    });
  }
};
var CalloutPickerModal = _CalloutPickerModal;
CalloutPickerModal.CALLOUTS = [
  ["note"],
  ["abstract", "summary", "tldr"],
  ["info"],
  ["tip", "hint", "important"],
  ["success", "check", "done"],
  ["question", "help", "faq"],
  ["warning", "caution", "attention"],
  ["failure", "fail", "missing"],
  ["danger", "error"],
  ["bug"],
  ["example"],
  ["quote", "cite"]
];

// src/components/table-modal.ts
var import_obsidian6 = require("obsidian");

// src/components/abstract/callback-modal.ts
var import_obsidian5 = require("obsidian");
var CallbackModal = class extends import_obsidian5.Modal {
  constructor(app2, modalTitle, confirmCallback) {
    super(app2);
    this.confirmCallback = confirmCallback;
    this.modalTitle = modalTitle;
  }
  successClose(data) {
    this.close();
    this.confirmCallback(data);
  }
  onOpen() {
    super.onOpen();
    const { titleEl, modalTitle } = this;
    titleEl.createEl("h1", { "text": modalTitle });
  }
  onClose() {
    this.containerEl.empty();
  }
};

// src/components/table-modal.ts
var TableModal = class extends CallbackModal {
  constructor(app2, confirmCallback) {
    super(app2, "Insert Table", confirmCallback);
  }
  onOpen() {
    super.onOpen();
    const { contentEl, containerEl } = this;
    containerEl.classList.add("keyshots-table-modal");
    contentEl.createEl("p", {
      "cls": "desc",
      "text": "Quick-select size in grid or write exact values and confirm them via button."
    });
    const divider = contentEl.createEl("div", "divider");
    const tableEl = divider.createEl("div", "table-selector-container");
    const matrix = tableEl.createEl("table");
    const processCellsInTable = (rN, cN, callback) => {
      Array.from(matrix.rows).slice(0, rN).forEach((row, i) => {
        Array.from(row.getElementsByTagName("td")).slice(0, cN).forEach((col, j) => callback(col, i, j));
      });
    };
    const geometryLabel = tableEl.createEl("div", "geometry-label");
    for (let i = 0; i < 10; i++) {
      const tr = matrix.createEl("tr");
      for (let j = 0; j < 10; j++) {
        const td = tr.createEl("td");
        if (j == 0)
          continue;
        td.addEventListener("click", () => {
          this.successClose({
            rows: i + 1,
            columns: j + 1
          });
        });
        td.addEventListener("mouseenter", () => {
          processCellsInTable(i + 1, j + 1, (cell) => cell.classList.add("hovered"));
          geometryLabel.textContent = `${i + 1}R x ${j + 1}C`;
        });
        td.addEventListener("mouseleave", () => {
          processCellsInTable(i + 1, j + 1, (cell) => cell.removeAttribute("class"));
          geometryLabel.textContent = ``;
        });
      }
    }
    const optEl = divider.createEl("div", { "cls": "opt" });
    const data = {
      row: 2,
      column: 2
    };
    new import_obsidian6.Setting(optEl).setName("Rows").setDesc("Does not include headings row.").addText((cb) => cb.setValue("2").onChange((v) => data.row = parseInt(v)));
    new import_obsidian6.Setting(optEl).setName("Columns").addText((cb) => cb.setValue("2").onChange((v) => data.column = parseInt(v)));
    optEl.querySelectorAll("input[type=text]").forEach((e) => e.setAttrs({
      "type": "number",
      "min": "2",
      "max": "200",
      "step": "1"
    }));
    new import_obsidian6.Setting(optEl).addButton((cb) => cb.setCta().setButtonText("Insert table").onClick(() => {
      if (isNaN(data.row) || isNaN(data.column)) {
        new import_obsidian6.Notice("\u26A0\uFE0F Error: Invalid input of row or column values!");
        return;
      }
      this.successClose({
        rows: Math.max(2, data.row),
        columns: Math.max(2, data.column)
      });
    }));
  }
};

// src/components/abstract/regex-modal.ts
var import_obsidian7 = require("obsidian");
var RegexModal = class extends CallbackModal {
  constructor(app2, editorContent, modalTitle, confirmCallback, matchesCountCallback) {
    super(app2, modalTitle, confirmCallback);
    this.pattern = "";
    this.editorContent = editorContent;
    this.matchesCountCallback = matchesCountCallback;
  }
  getRegex() {
    if (this.pattern === "")
      return void 0;
    try {
      return new RegExp(this.pattern, `gm${this.case_sensitive ? "" : "i"}`);
    } catch (SyntaxError) {
      return void 0;
    }
  }
  updateModalValidState() {
    const regex = this.getRegex();
    this.updatePreview();
    if (!regex) {
      this.patternInput.inputEl.classList.add("invalid");
      this.footer.nameEl.classList.add("invalid");
      this.footer.setName(this.pattern === "" ? "Empty Pattern!" : "Invalid Pattern!");
      this.button.setDisabled(true);
      return;
    }
    this.patternInput.inputEl.classList.remove("invalid");
    this.footer.nameEl.classList.remove("invalid");
    this.footer.setName("Matches: " + this.matchesCountCallback({ pattern: regex, only_selections: this.only_selections }));
    this.button.setDisabled(false);
  }
  updatePreview() {
    this.previewEl.empty();
    if (this.preview) {
      import_obsidian7.MarkdownRenderer.renderMarkdown(this.previewProcessor(this.editorContent), this.previewEl, "", new import_obsidian7.Component()).then();
      this.previewEl.classList.replace("raw", "markdown-rendered");
    } else {
      const content = this.previewEl.createEl("div");
      content.innerHTML = this.previewProcessor(this.editorContent);
      this.previewEl.classList.replace("markdown-rendered", "raw");
    }
  }
  addPatternInput() {
    new import_obsidian7.Setting(this.optionsCtrEl).setName("Pattern").setDesc("Regular Expression pattern to select text for action.").addText((cb) => this.patternInput = cb.setValue(this.pattern).setPlaceholder("(.*)").onChange((v) => {
      this.pattern = v;
      this.updateModalValidState();
    }));
  }
  addCaseSensitiveSetting() {
    new import_obsidian7.Setting(this.optionsCtrEl).setName("Case sensitive").setDesc("If should RegEx care about difference between capital or non-capital letters.").addToggle((cb) => cb.setValue(this.case_sensitive).onChange((v) => {
      this.case_sensitive = v;
      this.updateModalValidState();
    }));
  }
  addSelectionOnlySetting() {
    new import_obsidian7.Setting(this.optionsCtrEl).setName("Apply on already made selections only").setDesc("If regex should be applied only in current selections in the editor.").setClass("last").addToggle((cb) => cb.setValue(this.only_selections).onChange((v) => {
      this.only_selections = v;
      this.updateModalValidState();
    }));
  }
  onOpen() {
    super.onOpen();
    const { containerEl, contentEl } = this;
    containerEl.classList.add("keyshots-regex");
    const dividerEl = contentEl.createEl("div", "content-divider");
    this.optionsCtrEl = dividerEl.createEl("div", "options-ctr");
    const previewCtrEl = dividerEl.createEl("div", "preview-ctr");
    previewCtrEl.createEl("h2", { text: "Preview" });
    this.previewEl = previewCtrEl.createEl("div", "preview markdown-rendered");
    new import_obsidian7.Setting(previewCtrEl).setName("Preview mode").addToggle((cb) => cb.onChange((v) => {
      this.preview = v;
      this.updatePreview();
    }));
    this.footer = new import_obsidian7.Setting(contentEl).addButton((cb) => this.button = cb.setCta().setButtonText("Proceed").onClick(() => {
      const regex = this.getRegex();
      if (regex)
        this.successClose(this.buildData());
    }));
    this.footer.nameEl.classList.add("matches");
  }
};

// src/components/regex/regex-replace-modal.ts
var import_obsidian8 = require("obsidian");
var RegexReplaceModal = class extends RegexModal {
  constructor(app2, editorContent, modalTitle, confirmCallback, matchesCountCallback) {
    super(app2, editorContent, modalTitle, confirmCallback, matchesCountCallback);
    this.replacer = "";
  }
  previewProcessor(content) {
    const regex = this.getRegex();
    return regex ? content.replace(regex, this.replacer) : content;
  }
  buildData() {
    return {
      pattern: this.getRegex(),
      replacer: this.replacer,
      only_selections: this.only_selections
    };
  }
  onOpen() {
    super.onOpen();
    this.addPatternInput();
    new import_obsidian8.Setting(this.optionsCtrEl).setName("Replacer").setDesc("Text for replacement, can capture groups made by Pattern.").addText((cb) => cb.setValue(this.replacer).setPlaceholder("$1").onChange((v) => {
      this.replacer = v;
      this.updatePreview();
    }));
    this.addCaseSensitiveSetting();
    this.addSelectionOnlySetting();
    this.updateModalValidState();
  }
};

// src/components/regex/regex-search-modal.ts
var RegexSearchModal = class extends RegexModal {
  constructor(app2, editorContent, modalTitle, confirmCallback, matchesCountCallback) {
    super(app2, editorContent, modalTitle, confirmCallback, matchesCountCallback);
  }
  previewProcessor(content) {
    const regex = this.getRegex();
    return regex ? content.replace(regex, (match) => `<span class="keyshots-regex-match">${match}</span>`) : content;
  }
  buildData() {
    return {
      pattern: this.getRegex(),
      only_selections: this.only_selections
    };
  }
  onOpen() {
    super.onOpen();
    this.addPatternInput();
    this.addCaseSensitiveSetting();
    this.addSelectionOnlySetting();
    this.updateModalValidState();
  }
};

// src/commands.ts
var COMMANDS = (plugin, map) => [
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "duplicate-line-down",
    name: "Duplicate line down (Visual Studio Code)",
    repeatable: true,
    hotkeys: map.duplicate_line_down,
    editorCallback: (editor) => vscodeDuplicate(editor, 1 /* DOWN */)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "duplicate-line-up",
    name: "Duplicate line up (Visual Studio Code)",
    repeatable: true,
    hotkeys: map.duplicate_line_up,
    editorCallback: (editor) => vscodeDuplicate(editor, -1 /* UP */)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "duplicate-selection-or-line",
    name: "Duplicate selection or line (JetBrains IDEs)",
    repeatable: true,
    hotkeys: map.duplicate_selection_or_line,
    editorCallback: (editor) => jetBrainsDuplicate(editor)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "insert-line-above",
    name: "Insert line above",
    repeatable: true,
    hotkeys: map.insert_line_above,
    editorCallback: (editor) => insertLine(editor, -1 /* UP */)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "insert-line-below",
    name: "Insert line below",
    repeatable: true,
    hotkeys: map.insert_line_below,
    editorCallback: (editor) => insertLine(editor, 1 /* DOWN */)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "join-selected-lines",
    name: "Join selected lines",
    hotkeys: map.join_selected_lines,
    editorCallback: (editor) => replaceSelections(editor, (s) => s.replace(/\n/g, ""))
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "move-line-down",
    name: "Move line down",
    repeatable: true,
    hotkeys: map.move_line_down,
    editorCallback: (editor) => moveLine(editor, 1 /* DOWN */, editor.lineCount() - 1)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "move-line-up",
    name: "Move line up",
    repeatable: true,
    hotkeys: map.move_line_up,
    editorCallback: (editor) => moveLine(editor, -1 /* UP */, 0)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "reverse-selected-lines",
    name: "Reverse selected lines",
    hotkeys: map.reverse_selected_lines,
    editorCallback: (editor) => reverseSelectedLines(editor)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "shuffle-selected-lines",
    name: "Shuffle selected lines",
    hotkeys: map.shuffle_selected_lines,
    editorCallback: (editor) => shuffleSelectedLines(editor, plugin.settings.shuffle_rounds_amount)
  },
  {
    category: "Editor Lines Manipulation" /* EDITOR_LINES_MANIPULATION */,
    id: "sort-selected-lines",
    name: "Sort selected lines",
    hotkeys: map.sort_selected_lines,
    editorCallback: (editor) => sortSelectedLines(editor)
  },
  {
    category: "Insert Components" /* INSERT_COMPONENTS */,
    id: "better-insert-callout",
    name: "Better insert callout",
    hotkeys: map.better_insert_callout,
    editorCallback: (editor) => new CalloutPickerModal(plugin, (item) => insertCallout(editor, item)).open()
  },
  {
    category: "Insert Components" /* INSERT_COMPONENTS */,
    id: "insert-code-block",
    name: "Insert code block",
    hotkeys: map.insert_code_block,
    editorCallback: (editor) => new CodeBlockModal(plugin, (item) => insertCodeBlock(editor, item)).open()
  },
  {
    category: "Insert Components" /* INSERT_COMPONENTS */,
    id: "insert-ordinal-numbering",
    name: "Insert ordinal numbering",
    hotkeys: map.insert_ordinal_numbering,
    editorCallback: (editor) => insertOrdinalNumbering(editor)
  },
  {
    category: "Insert Components" /* INSERT_COMPONENTS */,
    id: "insert-table",
    name: "Insert Table",
    hotkeys: map.insert_table,
    editorCallback: (editor) => new TableModal(plugin.app, (data) => insertTable(editor, data.rows, data.columns)).open()
  },
  {
    category: "Rendered Controling" /* RENDERED_CONTROLING */,
    id: "close-all-foldable-callouts",
    name: "Close all foldable callouts",
    hotkeys: map.close_all_foldable_callouts,
    callback: () => document.querySelectorAll("div.callout.is-collapsible:not(.is-collapsed) div.callout-title").forEach((c) => c.click())
  },
  {
    category: "Rendered Controling" /* RENDERED_CONTROLING */,
    id: "open-all-foldable-callouts",
    name: "Open all foldable callouts",
    hotkeys: map.open_all_foldable_callouts,
    callback: () => document.querySelectorAll("div.callout.is-collapsible.is-collapsed div.callout-title").forEach((c) => c.click())
  },
  {
    category: "Rendered Controling" /* RENDERED_CONTROLING */,
    id: "toggle-all-callouts-fold-state",
    name: "Toggle all callouts fold state",
    hotkeys: map.toggle_all_callouts_fold_state,
    callback: () => document.querySelectorAll("div.callout div.callout-title").forEach((c) => c.click())
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-bold",
    name: "Multi-toggle bold",
    hotkeys: map.multi_toggle_bold,
    editorCallback: (editor) => surroundWithChars(editor, "**")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-code",
    name: "Multi-toggle code",
    hotkeys: map.multi_toggle_code,
    editorCallback: (editor) => surroundWithChars(editor, "``")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-comment",
    name: "Multi-toggle comment",
    hotkeys: map.multi_toggle_comment,
    editorCallback: (editor) => surroundWithChars(editor, "%%")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-highlight",
    name: "Multi-toggle highlight",
    hotkeys: map.multi_toggle_highlight,
    editorCallback: (editor) => surroundWithChars(editor, "==")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-italic",
    name: "Multi-toggle italic",
    hotkeys: map.multi_toggle_italic,
    editorCallback: (editor) => surroundWithChars(editor, "*")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "multi-toggle-strikethrough",
    name: "Multi-toggle strikethrough",
    hotkeys: map.multi_toggle_strikethrough,
    editorCallback: (editor) => surroundWithChars(editor, "~~")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "replace-by-regex",
    name: "Replace by Regular Expression (Regex)",
    hotkeys: map.replace_by_regex,
    editorCallback: (editor) => new RegexReplaceModal(plugin.app, editor.getValue(), "Replace by Regular Expression", (data) => replaceRegex(editor, data.pattern, data.replacer, data.only_selections), (data) => countRegexMatches(editor, data.pattern, data.only_selections)).open()
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-case-jetbrains",
    name: "Toggle case (JetBrains)",
    hotkeys: map.toggle_case_jetbrains,
    editorCallback: (editor) => replaceSelections(editor, (str) => str === str.toLowerCase() ? str.toUpperCase() : str.toLowerCase())
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-kebab-case",
    name: "Toggle selections kebabcase",
    hotkeys: map.toggle_kebabcase,
    editorCallback: (editor) => convertOneToOtherChars(editor, " ", "-")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-keyboard-input",
    name: "Toggle keyboard input (<kbd>)",
    hotkeys: map.toggle_keyboard_input,
    editorCallback: (editor) => surroundWithChars(editor, "<kbd>", "</kbd>")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-snake-case",
    name: "Toggle selections snakecase",
    hotkeys: map.toggle_snakecase,
    editorCallback: (editor) => convertOneToOtherChars(editor, " ", "_")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-underline",
    name: "Toggle underline",
    hotkeys: map.toggle_underline,
    editorCallback: (editor) => surroundWithChars(editor, "<u>", "</u>")
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "toggle-uri-encoded-or-decoded",
    name: "Toggle selections URI encoded/decoded string",
    hotkeys: map.toggle_uri_encoded_or_decoded,
    editorCallback: (editor) => convertURI(editor)
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "transform-selections-to-lowercase",
    name: "Transform selections to lowercase",
    hotkeys: map.transform_selections_to_lowercase,
    editorCallback: (editor) => replaceSelections(editor, (s) => s.toLowerCase())
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "transform-selections-to-titlecase",
    name: "Transform selections to titlecase (capitalize)",
    hotkeys: map.transform_selections_to_titlecase,
    editorCallback: (editor) => replaceSelections(editor, (s) => s.replace(/\w\S*/g, (txt) => txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase()))
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "transform-selections-to-uppercase",
    name: "Transform selections to uppercase",
    hotkeys: map.transform_selections_to_uppercase,
    editorCallback: (editor) => replaceSelections(editor, (s) => s.toUpperCase())
  },
  {
    category: "Replace Selections" /* REPLACE_SELECTIONS */,
    id: "trim-selections",
    name: "Trim selections",
    hotkeys: map.trim_selections,
    editorCallback: (editor) => replaceSelections(editor, (s) => s.trim())
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "add-caret-down",
    name: "Add caret cursor down",
    repeatable: true,
    hotkeys: map.add_caret_down,
    editorCallback: (editor) => addCarets(editor, 1 /* DOWN */, editor.lineCount())
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "add-caret-up",
    name: "Add caret cursor up",
    repeatable: true,
    hotkeys: map.add_caret_up,
    editorCallback: (editor) => addCarets(editor, -1 /* UP */, 0)
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "search-by-regex",
    name: "Search by Regular Expression (Regex)",
    hotkeys: map.search_by_regex,
    editorCallback: (editor) => new RegexSearchModal(plugin.app, editor.getValue(), "Search by Regular Expression", (data) => selectByRegex(editor, data.pattern, data.only_selections), (data) => countRegexMatches(editor, data.pattern, data.only_selections)).open()
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "select-all-word-instances",
    name: "Select all word instances",
    hotkeys: map.select_all_word_instances,
    editorCallback: (editor) => selectAllWordInstances(editor, plugin.settings.case_sensitive)
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "select-multiple-word-instances",
    name: "Select multiple word instances",
    hotkeys: map.select_multiple_word_instances,
    editorCallback: (editor) => selectWordInstances(editor, plugin.settings.case_sensitive)
  },
  {
    category: "Selection Adding or Removing" /* SELECTION_ADD_OR_REMOVE */,
    id: "split-selections-by-lines",
    name: "Split selections by lines",
    hotkeys: map.split_selections_by_lines,
    editorCallback: (editor) => splitSelectionsByLines(editor)
  },
  {
    category: "Transform Selections" /* TRANSFORM_SELECTIONS */,
    id: "expand-line-selections",
    name: "Expand line selections",
    hotkeys: map.expand_line_selections,
    editorCallback: (editor) => expandSelections(editor)
  },
  {
    category: "Transform Selections" /* TRANSFORM_SELECTIONS */,
    id: "split-selections-on-new-line",
    name: "Split selections on new line",
    hotkeys: map.split_selections_on_new_line,
    editorCallback: (editor) => splitSelectedTextOnNewLine(editor)
  },
  {
    category: "Obsidian Settings" /* OBSIDIAN_SETTINGS */,
    id: "switch-inline-title-setting",
    name: "Switch 'inline title' setting",
    hotkeys: map.switch_inline_title_setting,
    callback: () => flipBooleanSetting(plugin.app, "showInlineTitle")
  },
  {
    category: "Obsidian Settings" /* OBSIDIAN_SETTINGS */,
    id: "switch-line-numbers-setting",
    name: "Switch 'line numbers' setting",
    hotkeys: map.switch_line_numbers_setting,
    callback: () => flipBooleanSetting(plugin.app, "showLineNumber")
  },
  {
    category: "Obsidian Settings" /* OBSIDIAN_SETTINGS */,
    id: "switch-readable-length-setting",
    name: "Switch 'readable line length' setting",
    hotkeys: map.switch_readable_length_setting,
    callback: () => flipBooleanSetting(plugin.app, "readableLineLength")
  },
  {
    category: "Other" /* OTHER */,
    id: "open-dev-tools",
    name: "Open developer tools",
    hotkeys: map.open_dev_tools,
    callback: () => electron.remote.getCurrentWindow().webContents.openDevTools()
  },
  {
    category: "Keyshots Settings" /* KEYSHOTS_SETTINGS */,
    id: "change-keyshots-preset",
    name: "Change Keyshots preset",
    hotkeys: map.change_keyshots_preset,
    callback: () => new IDEPresetModal(plugin).open()
  },
  {
    category: "Keyshots Settings" /* KEYSHOTS_SETTINGS */,
    id: "open-keyshots-settings-tab",
    name: "Open Keyshots settings tab",
    hotkeys: map.open_keyshots_settings_tab,
    callback: () => openKeyshotsSettings(app)
  },
  {
    category: "Keyshots Settings" /* KEYSHOTS_SETTINGS */,
    id: "switch-keyshots-case-sensitivity",
    name: "Switch Keyshots case sensitivity",
    hotkeys: map.switch_keyshots_case_sensitivity,
    callback: () => toggleCaseSensitivity(plugin)
  }
];
var DOUBLE_KEY_COMMANDS = (plugin) => [
  {
    conditional: (plugin2) => plugin2.settings.carets_via_double_ctrl,
    object: {
      id: "add-caret",
      name: "Add caret cursors",
      key: "Control",
      maxDelay: 400,
      anotherKeyPressedCallback: (ev) => addCaretsViaDoubleKey(plugin, ev)
    }
  },
  {
    conditional: (plugin2) => plugin2.settings.quick_switch_via_double_shift,
    object: {
      id: "quick-open",
      name: "Open Quick-Switcher",
      key: "Shift",
      maxDelay: 400,
      lastPressedCallback: () => runCommandById(plugin, "switcher:open", () => new import_obsidian9.Notice("Quick Switcher plugin is not enabled!"))
    }
  }
];

// src/classes/double-key-registry.ts
var DoubleKeyRegistry = class {
  constructor(plugin) {
    this.cmds = {};
    this.cancelAction = false;
    this.lastPressed = void 0;
    this.activeCmdId = void 0;
    this.plugin = plugin;
    this.statusBarItem = this.plugin.addStatusBarItem();
    this.statusBarItem.setAttr("aria-label-position", "top");
    this.setStatusBarState();
    const elem = window;
    this.plugin.registerDomEvent(elem, "keydown", (ev) => {
      if (Object.keys(this.cmds).length === 0)
        return;
      if (this.cancelAction)
        this.cancelAction = false;
      const currCmd = this.activeCmdId ? this.cmds[this.activeCmdId] : void 0;
      if (this.lastPressed && !currCmd && this.lastPressed.key === ev.key) {
        this.activeCmdId = Object.keys(this.cmds).filter((cmd) => this.cmds[cmd].key === ev.key)[0];
        const currCmd2 = this.cmds[this.activeCmdId];
        if (Math.abs(ev.timeStamp - this.lastPressed.timeStamp) > currCmd2.maxDelay) {
          this.activeCmdId = void 0;
          return;
        }
        this.setStatusBarState(currCmd2.name);
        if (currCmd2.lastPressedCallback)
          currCmd2.lastPressedCallback();
        if (!currCmd2.anotherKeyPressedCallback)
          this.cancelCurrentCommand(true);
      } else if (currCmd && ev.key !== currCmd.key && currCmd.anotherKeyPressedCallback)
        currCmd.anotherKeyPressedCallback(ev);
      else if (this.lastPressed && this.lastPressed.key !== ev.key)
        this.cancelCurrentCommand();
    });
    this.plugin.registerDomEvent(elem, "keyup", (ev) => {
      if (Object.keys(this.cmds).length === 0)
        return;
      if (this.cancelAction)
        return;
      const currCmd = this.activeCmdId ? this.cmds[this.activeCmdId] : void 0;
      if (!currCmd && Object.values(this.cmds).map((c) => c.key).includes(ev.key))
        this.lastPressed = { key: ev.key, timeStamp: ev.timeStamp };
      else if (currCmd && currCmd.key === ev.key)
        this.cancelCurrentCommand();
    });
    this.plugin.registerDomEvent(elem, "mousedown", () => {
      if (Object.keys(this.cmds).length === 0)
        return;
      this.cancelCurrentCommand(true);
    });
  }
  setStatusBarState(commandName) {
    this.statusBarItem.setText(commandName ? "\u{1F7E9}" : "\u{1F7E8}");
    this.statusBarItem.setAttr("aria-label", "Keyshots: " + (commandName ? `command "${commandName}" is active` : `no double-key command active`));
  }
  cancelCurrentCommand(ingoreNextKeyUp = false) {
    this.setStatusBarState();
    this.cancelAction = ingoreNextKeyUp;
    this.activeCmdId = void 0;
    this.lastPressed = void 0;
  }
  registerCommand(cmd) {
    this.cmds[cmd.id] = cmd;
    this.cancelCurrentCommand();
  }
  unregisterAllCommands() {
    this.cancelCurrentCommand(true);
    Object.keys(this.cmds).forEach((i) => delete this.cmds[i]);
  }
};

// src/components/settings-tab.ts
var import_obsidian10 = require("obsidian");

// src/classes/document-fragment-builder.ts
var _fragment;
var DocumentFragmentBuilder = class {
  constructor() {
    __privateAdd(this, _fragment, void 0);
    __privateSet(this, _fragment, document.createDocumentFragment());
  }
  appendText(text) {
    __privateGet(this, _fragment).append(text);
    return this;
  }
  createElem(tag, o) {
    __privateGet(this, _fragment).createEl(tag, o);
    return this;
  }
  toFragment() {
    return __privateGet(this, _fragment);
  }
};
_fragment = new WeakMap();

// src/components/settings-tab.ts
var KeyshotsSettingTab = class extends import_obsidian10.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    const title = containerEl.createEl("h1", { text: "Keyshots Settings" });
    title.innerHTML = KEYSHOTS_SVG(48) + title.innerHTML;
    title.setCssProps({ "display": "flex", "align-items": "center", "gap": "10px" });
    containerEl.createEl("h2", { text: "\u2328\uFE0F Default keys" });
    new import_obsidian10.Setting(containerEl).setName("IDE Keys Mapping").setDesc("Change default hotkeys based on IDE, that you are comfortable with. This does not overwrite your custom hotkeys!").setDesc(new DocumentFragmentBuilder().appendText("Change default hotkeys based on IDE, that you are comfortable with.").createElem("br").createElem("b", { text: "\u2757This does not overwrite your custom Keyshots hotkeys configuration!" }).toFragment()).addDropdown((cb) => cb.addOptions(Object.entries(IDE_LABELS).reduce((acc, [key, ideInfo]) => {
      acc[key] = ideInfo.name;
      return acc;
    }, {})).setValue(this.plugin.settings.ide_mappings).onChange(async (value) => {
      await this.plugin.changePreset(value);
    }));
    new import_obsidian10.Setting(containerEl).setName("Default Keyshots hotkeys").setDesc(new DocumentFragmentBuilder().appendText("Sets default hotkeys for keyshots commands, that are not modified by IDE preset.").createElem("br").createElem("b", { text: "\u2757If you select clear preset, this setting will be ignored!" }).toFragment()).addToggle((cb) => cb.setValue(this.plugin.settings.keyshot_mappings).onChange(async (value) => {
      this.plugin.settings.keyshot_mappings = value;
      this.plugin.loadCommands();
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "\u{1F527} Commands settings" });
    new import_obsidian10.Setting(containerEl).setName("Case sensitivity").setDesc(new DocumentFragmentBuilder().appendText("Determines if Keyshots commands should be case sensitive. For toggling while editing text just simply use ").createElem("kbd", { text: " Ctrl + Alt + I" }).appendText(" hotkey if you are using default Keyshots binding!").toFragment()).addToggle((cb) => cb.setValue(this.plugin.settings.case_sensitive).onChange(async (value) => {
      this.plugin.settings.case_sensitive = value;
      await this.plugin.saveSettings();
    }));
    let slider;
    new import_obsidian10.Setting(containerEl).setName("Shuffle rounds amount").setDesc(new DocumentFragmentBuilder().appendText("Number of rounds that will ").createElem("code", { text: "Shuffle selected lines" }).appendText(" command take. The more rounds it will take, the more random it will be!").toFragment()).addSlider((cb) => {
      slider = cb;
      slider.setValue(this.plugin.settings.shuffle_rounds_amount).setLimits(1, 50, 1).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.shuffle_rounds_amount = value;
        await this.plugin.saveSettings();
      });
    }).addButton((cb) => cb.setIcon("refresh-ccw").setTooltip("Reset to default").onClick(async () => {
      this.plugin.settings.shuffle_rounds_amount = DEFAULT_SETTINGS.shuffle_rounds_amount;
      slider.setValue(DEFAULT_SETTINGS.shuffle_rounds_amount);
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h2", { text: "\u{1F527} JetBrains Features" });
    new import_obsidian10.Setting(containerEl).setName(new DocumentFragmentBuilder().appendText("Double ").createElem("kbd", { text: "Ctrl" }).appendText(" caret adding shortcut").toFragment()).setDesc(new DocumentFragmentBuilder().appendText("Everytime when you press ").createElem("kbd", { text: "Ctrl" }).appendText(" twice and second one you'll hold, then when you press ").createElem("kbd", { text: "\u2193" }).appendText(" or ").createElem("kbd", { text: "\u2191" }).appendText(' keys, Obsidian will add carets like will normaly do with "').createElem("b", { text: "Add carets up/down" }).appendText('" command.').toFragment()).addToggle((cb) => cb.setValue(this.plugin.settings.carets_via_double_ctrl).onChange(async (value) => {
      this.plugin.settings.carets_via_double_ctrl = value;
      await this.plugin.saveSettings();
      this.plugin.loadDoubleKeyCommands();
    }));
    new import_obsidian10.Setting(containerEl).setName(new DocumentFragmentBuilder().appendText("Opening Quick-Switcher via double ").createElem("kbd", { text: "Shift" }).appendText(" shortcut").toFragment()).setDesc(new DocumentFragmentBuilder().appendText("If you have Quick Switcher plugin enabled, hitting ").createElem("kbd", { text: "Shift" }).appendText(" twice will open quick switcher window.").toFragment()).addToggle((cb) => cb.setValue(this.plugin.settings.quick_switch_via_double_shift).onChange(async (value) => {
      this.plugin.settings.quick_switch_via_double_shift = value;
      await this.plugin.saveSettings();
      this.plugin.loadDoubleKeyCommands();
    }));
  }
};

// src/plugin.ts
var KeyshotsPlugin = class extends import_obsidian11.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new KeyshotsSettingTab(this.app, this));
    this.doubleKeyRegistry = new DoubleKeyRegistry(this);
    this.loadDoubleKeyCommands();
    this.loadCommands();
  }
  loadCommands() {
    if (this.commandIds !== void 0) {
      this.commandIds.forEach((cmd) => this.app.commands.removeCommand(cmd));
      this._events = this._events.filter((e) => !e.toString().contains(".removeCommand("));
    }
    this.commandIds = new Set(COMMANDS(this, mapBySettings(this)).map((cmd) => this.addCommand(cmd).id));
  }
  loadDoubleKeyCommands() {
    this.doubleKeyRegistry.unregisterAllCommands();
    DOUBLE_KEY_COMMANDS(this).filter((cmd) => cmd.conditional(this)).forEach((cmd) => this.doubleKeyRegistry.registerCommand(cmd.object));
  }
  async changePreset(presetId) {
    if (!Object.keys(IDE_LABELS).contains(presetId)) {
      console.warn("Keyshots: Invalid attempt to change Keyshots mappings preset, incorrect preset ID.");
      return;
    }
    this.settings.ide_mappings = presetId;
    this.loadCommands();
    await this.saveSettings();
  }
  availablePresets() {
    return Object.keys(IDE_LABELS);
  }
  getPresetTitle(presetId) {
    return IDE_LABELS[presetId].name;
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
